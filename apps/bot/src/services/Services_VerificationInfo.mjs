// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../Env.mjs";
import * as UUID from "UUID";
import * as $$Promise from "../../../../node_modules/@ryyppy/rescript-promise/src/Promise.mjs";
import * as Constants from "../Constants.mjs";
import * as Endpoints from "../Endpoints.mjs";
import NodeFetch from "node-fetch";
import * as Caml_exceptions from "../../../../node_modules/rescript/lib/es6/caml_exceptions.js";
import * as Services_ResponseCodes from "./Services_ResponseCodes.mjs";

var VerificationInfoError = /* @__PURE__ */Caml_exceptions.create("Services_VerificationInfo.VerificationInfoError");

var FetchVerificationInfoError = /* @__PURE__ */Caml_exceptions.create("Services_VerificationInfo.FetchVerificationInfoError");

Env.createEnv(undefined);

var config = Env.getConfig(undefined);

var uuidNAMESPACE;

if (config.TAG === /* Ok */0) {
  uuidNAMESPACE = config._0.uuidNamespace;
} else {
  throw {
        RE_EXN_ID: VerificationInfoError,
        _1: config._0,
        Error: new Error()
      };
}

var $$Response = {};

var defaultVerification_userAddresses = [];

var defaultVerification = {
  authorExist: false,
  authorUnique: false,
  timestamp: 0,
  userAddresses: defaultVerification_userAddresses,
  userVerified: false,
  fetching: false
};

function fetchVerificationInfo(retryOpt, id) {
  var retry = retryOpt !== undefined ? retryOpt : 5;
  var id$1 = UUID.v5(id, uuidNAMESPACE);
  var endpoint = Endpoints.brightIdVerificationEndpoint + "/" + Constants.contextId + "/" + id$1 + "?timestamp=seconds";
  var params = {
    method: "GET",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    timestamp: 60000
  };
  return $$Promise.$$catch(NodeFetch(endpoint, params).then(function (prim) {
                    return prim.json();
                  }).then(function (res) {
                  var data = res.data;
                  if (data == null) {
                    var match = res.code;
                    var match$1 = res.errorMessage;
                    var match$2 = res.errorNum;
                    if (match == null) {
                      return Promise.reject({
                                  RE_EXN_ID: VerificationInfoError,
                                  _1: "No code or errorMessage"
                                });
                    } else if (match$1 == null) {
                      return Promise.reject({
                                  RE_EXN_ID: VerificationInfoError,
                                  _1: "No code or errorMessage"
                                });
                    } else if (match$2 == null) {
                      return Promise.reject({
                                  RE_EXN_ID: VerificationInfoError,
                                  _1: "No code or errorMessage"
                                });
                    } else {
                      return Promise.reject({
                                  RE_EXN_ID: FetchVerificationInfoError,
                                  error: match$1,
                                  fetching: false
                                });
                    }
                  }
                  var match$3 = data.unique;
                  var match$4 = data.timestamp;
                  var match$5 = data.contextIds;
                  if (!(match$3 == null) && !(match$4 == null) && !(match$5 == null)) {
                    return Promise.resolve({
                                authorExist: true,
                                authorUnique: match$3,
                                timestamp: match$4,
                                userAddresses: match$5,
                                userVerified: true,
                                fetching: false
                              });
                  } else {
                    return Promise.reject({
                                RE_EXN_ID: VerificationInfoError,
                                _1: "Necessary Verification Info missing after successful fetch "
                              });
                  }
                }), (function (e) {
                if (e.RE_EXN_ID === VerificationInfoError) {
                  console.error(e._1);
                } else if (e.RE_EXN_ID === FetchVerificationInfoError) {
                  console.error("Fetch Verification Info Error: " + e.error);
                } else if (e.RE_EXN_ID === $$Promise.JsError) {
                  var msg = e._1.message;
                  if (msg !== undefined) {
                    console.error(msg);
                  } else {
                    console.error("Must be some non-error value");
                  }
                } else {
                  console.error("Some unknown error");
                }
                var retry$1 = retry - 1 | 0;
                if (retry$1 !== 0) {
                  return fetchVerificationInfo(retry$1, id$1);
                } else {
                  return Promise.resolve(defaultVerification);
                }
              }));
}

function getBrightIdVerification(member) {
  var id = member.id;
  return fetchVerificationInfo(undefined, id);
}

var contextId = Constants.contextId;

var brightIdVerificationEndpoint = Endpoints.brightIdVerificationEndpoint;

var notFoundCode = Services_ResponseCodes.notFoundCode;

var errorCode = Services_ResponseCodes.errorCode;

var canNotBeVerified = Services_ResponseCodes.canNotBeVerified;

var verificationPollingEvery = 3000;

var requestTimeout = 60000;

export {
  VerificationInfoError ,
  FetchVerificationInfoError ,
  config ,
  uuidNAMESPACE ,
  $$Response ,
  contextId ,
  brightIdVerificationEndpoint ,
  notFoundCode ,
  errorCode ,
  canNotBeVerified ,
  verificationPollingEvery ,
  requestTimeout ,
  defaultVerification ,
  fetchVerificationInfo ,
  getBrightIdVerification ,
  
}
/*  Not a pure module */
