// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as UpdateOrReadGistMjs from "../updateOrReadGist.mjs";
import * as Services_VerificationInfo from "../services/Services_VerificationInfo.mjs";

var MeHandlerError = /* @__PURE__ */Caml_exceptions.create("Buttons_Verify.MeHandlerError");

function readGist(prim) {
  return UpdateOrReadGistMjs.readGist();
}

function getRolebyRoleName(guildRoleManager, roleName) {
  var guildRole = guildRoleManager.cache.find(function (role) {
        return role.name === roleName;
      });
  if (!(guildRole == null)) {
    return guildRole;
  }
  throw {
        RE_EXN_ID: MeHandlerError,
        _1: "Could not find a role with the name " + roleName,
        Error: new Error()
      };
}

function getRoleFromGuildData(data) {
  return data.role;
}

function getGuildDataFromGist(guilds, guildId, interaction) {
  var guildData = Js_dict.get(guilds, guildId);
  if (guildData !== undefined) {
    return Caml_option.valFromOption(guildData);
  }
  interaction.editReply({
        content: "Failed to retreive data for this Discord Guild"
      });
  throw {
        RE_EXN_ID: MeHandlerError,
        _1: "Failed to retreive data for this Discord Guild",
        Error: new Error()
      };
}

function verifyMember(guildRole, member) {
  var guildMemberRoleManager = member.roles;
  return guildMemberRoleManager.add(guildRole, undefined);
}

function noMultipleAccounts(member) {
  member.send("You are currently limited to one Discord account with BrightID. If there has been a mistake, message the BrightID team on Discord https://discord.gg/N4ZbNjP", undefined);
  return Promise.reject({
              RE_EXN_ID: MeHandlerError,
              _1: "Verification Info can not be retrieved from more than one Discord account."
            });
}

function execute(interaction) {
  var guild = interaction.guild;
  var member = interaction.member;
  var guildRoleManager = guild.roles;
  var guildId = guild.id;
  return $$Promise.$$catch(interaction.deferReply({
                    ephemeral: true
                  }).then(function (param) {
                  return UpdateOrReadGistMjs.readGist().then(function (guilds) {
                              var guildRole = getRolebyRoleName(guildRoleManager, getGuildDataFromGist(guilds, guildId, interaction).role);
                              return Services_VerificationInfo.getBrightIdVerification(member).then(function (verificationInfo) {
                                          if (verificationInfo.userAddresses.length > 1) {
                                            return noMultipleAccounts(member);
                                          } else if (verificationInfo.userVerified) {
                                            verifyMember(guildRole, member).then(function (param) {
                                                  return interaction.editReply({
                                                              content: "Hey, I recognize you! I just gave you the \`" + guildRole.name + "\` role. You are now BrightID verified in " + guild.name + " server!"
                                                            });
                                                });
                                            return Promise.resolve(undefined);
                                          } else {
                                            interaction.editReply({
                                                  content: "You are not properly verified with BrightID"
                                                });
                                            return Promise.reject({
                                                        RE_EXN_ID: MeHandlerError,
                                                        _1: "Member " + member.displayName + " is not verified"
                                                      });
                                          }
                                        });
                            });
                }), (function (e) {
                if (e.RE_EXN_ID === MeHandlerError) {
                  console.error(e._1);
                } else if (e.RE_EXN_ID === $$Promise.JsError) {
                  var msg = e._1.message;
                  if (msg !== undefined) {
                    console.error(msg);
                  } else {
                    console.error("Must be some non-error value");
                  }
                } else {
                  console.error("Some unknown error");
                }
                return Promise.resolve(undefined);
              }));
}

var customId = "verify";

export {
  MeHandlerError ,
  readGist ,
  getRolebyRoleName ,
  getRoleFromGuildData ,
  getGuildDataFromGist ,
  verifyMember ,
  noMultipleAccounts ,
  execute ,
  customId ,
}
/* ../updateOrReadGist.mjs Not a pure module */
