// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DiscordJs from "discord.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Builders from "@discordjs/builders";
import * as UpdateOrReadGistMjs from "../updateOrReadGist.mjs";

var GuildHandlerError = /* @__PURE__ */Caml_exceptions.create("Commands_Guild.GuildHandlerError");

function readGist(prim) {
  return UpdateOrReadGistMjs.readGist();
}

function getGuildDataFromGist(guilds, guildId, interaction) {
  var guildData = Js_dict.get(guilds, guildId);
  if (guildData !== undefined) {
    return Caml_option.valFromOption(guildData);
  }
  interaction.editReply({
        content: "Failed to retrieve data from this server from Bright ID"
      });
  throw {
        RE_EXN_ID: GuildHandlerError,
        _1: "Commands_Guild: The guild id:" + guildId + " did not return any data",
        Error: new Error()
      };
}

function generateEmbed(guilds, interaction, offset) {
  var current = Belt_Array.slice(guilds, offset, offset + 10 | 0);
  var embedTitle = "Showing guilds " + (offset + 1 | 0).toString() + "-" + (offset + current.length | 0).toString() + " out of " + guilds.length.toString();
  var embed = new DiscordJs.MessageEmbed().setTitle(embedTitle);
  return UpdateOrReadGistMjs.readGist().then(function (guilds) {
              Belt_Array.forEach(current, (function (g) {
                      var guildData = getGuildDataFromGist(guilds, g.id, interaction);
                      var inviteLink = guildData.inviteLink;
                      var guildLink = (inviteLink == null) ? "No Invite Link Available" : "**Invite:** " + inviteLink;
                      embed.addField(g.name, guildLink, false);
                      
                    }));
              return Promise.resolve(embed);
            });
}

function execute(interaction) {
  var client = interaction.client;
  var clientGuildManager = client.guilds;
  var member = interaction.member;
  var unsortedGuilds = clientGuildManager.cache;
  var guilds = unsortedGuilds.sort(function (a, b) {
          if (a.memberCount > b.memberCount) {
            return -1;
          } else {
            return 1;
          }
        }).toJSON();
  return interaction.deferReply({
                ephemeral: true
              }).then(function (param) {
              return $$Promise.$$catch(generateEmbed(guilds, interaction, 0).then(function (embed) {
                                return interaction.editReply({
                                            embeds: [embed]
                                          });
                              }).then(function (guildsMessage) {
                              if (guilds.length >= 10) {
                                guildsMessage.react("➡️");
                                var collector = guildsMessage.createReactionCollector((function (reaction, user) {
                                        var emoji = reaction.emoji;
                                        var name = emoji.emoji;
                                        return Promise.resolve(Belt_Array.some([
                                                        "⬅️",
                                                        "➡️"
                                                      ], (function (arrow) {
                                                          return name === arrow;
                                                        })) && user.id === member.id);
                                      }), {
                                      time: 60000
                                    });
                                collector.on("collect", (function (reaction) {
                                        guildsMessage.reactions.removeAll();
                                        var emoji = reaction.emoji;
                                        var name = emoji.emoji;
                                        var currentIndex = name === "⬅️" ? -10 : 10;
                                        generateEmbed(guilds, interaction, currentIndex).then(function (embed) {
                                              return interaction.editReply({
                                                          embeds: [embed]
                                                        });
                                            });
                                        if (currentIndex !== 0) {
                                          if ((currentIndex + 10 | 0) < guilds.length) {
                                            guildsMessage.react("➡️");
                                            return ;
                                          } else {
                                            return ;
                                          }
                                        } else {
                                          guildsMessage.react("⬅️");
                                          return ;
                                        }
                                      }));
                              }
                              return Promise.resolve(undefined);
                            }), (function (e) {
                            if (e.RE_EXN_ID === GuildHandlerError) {
                              console.error(e._1);
                            } else if (e.RE_EXN_ID === $$Promise.JsError) {
                              var msg = e._1.message;
                              if (msg !== undefined) {
                                console.error(msg);
                              } else {
                                console.error("Must be some non-error value");
                              }
                            } else {
                              console.error("Some unknown error");
                            }
                            return Promise.resolve(undefined);
                          }));
            });
}

var data = new Builders.SlashCommandBuilder().setName("guilds").setDescription("See a list of Discord Servers using the BrightID bot");

export {
  GuildHandlerError ,
  readGist ,
  getGuildDataFromGist ,
  generateEmbed ,
  execute ,
  data ,
  
}
/* data Not a pure module */
