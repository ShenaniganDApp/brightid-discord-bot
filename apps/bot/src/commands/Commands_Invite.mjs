// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as DiscordJs from "discord.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Builders from "@discordjs/builders";
import * as UpdateOrReadGistMjs from "../updateOrReadGist.mjs";

var InviteCommandError = /* @__PURE__ */Caml_exceptions.create("Commands_Invite.InviteCommandError");

function updateGist(prim0, prim1) {
  return UpdateOrReadGistMjs.updateGist(prim0, prim1);
}

var urlRe = /(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})/;

function execute(interaction) {
  var guild = interaction.guild;
  var member = interaction.member;
  var isAdmin = member.permissions.has(DiscordJs.Permissions.FLAGS.ADMINISTRATOR);
  var commandOptions = interaction.options;
  return interaction.deferReply({
                ephemeral: true
              }).then(function (param) {
              var tmp;
              if (isAdmin) {
                var inviteLink = commandOptions.getString("invite");
                if (inviteLink == null) {
                  interaction.editReply({
                        content: "I didn't receive an invite link. (For some unexplained reason)"
                      });
                  tmp = Promise.reject({
                        RE_EXN_ID: InviteCommandError,
                        _1: "Commands_Invite: Invite Link returned null or undefined"
                      });
                } else if (urlRe.test(inviteLink)) {
                  UpdateOrReadGistMjs.updateGist(guild.id, {
                        inviteLink: inviteLink
                      });
                  interaction.editReply({
                        content: "Successfully update server invite link to " + inviteLink + "",
                        ephemeral: true
                      });
                  tmp = Promise.resolve(undefined);
                } else {
                  interaction.editReply({
                        content: "The invite link is not a valid URL"
                      });
                  tmp = Promise.reject({
                        RE_EXN_ID: InviteCommandError,
                        _1: "Commands_Invite: Invite Link is not a valid URL"
                      });
                }
              } else {
                interaction.editReply({
                      content: "Only administrators can change the invite link"
                    });
                throw {
                      RE_EXN_ID: InviteCommandError,
                      _1: "Commands_Invite: User does not have Administrator permissions",
                      Error: new Error()
                    };
              }
              return $$Promise.$$catch(tmp, (function (e) {
                            if (e.RE_EXN_ID === InviteCommandError) {
                              console.error(e._1);
                            } else if (e.RE_EXN_ID === $$Promise.JsError) {
                              var msg = e._1.message;
                              if (msg !== undefined) {
                                console.error(msg);
                              } else {
                                console.error("Must be some non-error value");
                              }
                            } else {
                              console.error("Some unknown error");
                            }
                            return Promise.resolve(undefined);
                          }));
            });
}

var data = new Builders.SlashCommandBuilder().setName("invite").setDescription("Add an invite link to be displayed for this server").addStringOption(function (option) {
      return option.setName("invite").setDescription("Enter an invite link to this server").setRequired(true);
    });

export {
  InviteCommandError ,
  updateGist ,
  urlRe ,
  execute ,
  data ,
}
/* data Not a pure module */
