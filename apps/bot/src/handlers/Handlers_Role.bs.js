// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var UpdateOrReadGistJs = require("../updateOrReadGist.js");

var RoleHandlerError = /* @__PURE__ */Caml_exceptions.create("Handlers_Role.RoleHandlerError");

function updateGist(prim0, prim1) {
  return UpdateOrReadGistJs.updateGist(prim0, prim1);
}

function readGist(prim) {
  return UpdateOrReadGistJs.readGist();
}

var newRoleRe = /(?<=^\S+)\s/;

function getRolebyRoleName(guildRoleManager, roleName) {
  var guildRole = guildRoleManager.cache.find(function (role) {
        return role.name === roleName;
      });
  if (!(guildRole == null)) {
    return guildRole;
  }
  throw {
        RE_EXN_ID: RoleHandlerError,
        _1: "Could not find a role with the name " + roleName,
        Error: new Error()
      };
}

function role(member, param, message) {
  var guild = member.guild;
  var guildRoleManager = guild.roles;
  var tmp;
  if (member.hasPermission("ADMINISTRATOR")) {
    var role$1 = message.content.split(newRoleRe);
    var role$2 = Belt_Array.get(role$1, 1);
    if (role$2 !== undefined) {
      var role$3 = Caml_option.valFromOption(role$2);
      tmp = role$3 !== undefined ? UpdateOrReadGistJs.readGist().then(function (guilds) {
              var guildId = guild.id;
              var guildData = Js_dict.get(guilds, guildId);
              if (guildData !== undefined) {
                var previousRole = guildData.role;
                var guildRole = getRolebyRoleName(guildRoleManager, previousRole);
                return guildRole.edit({
                                name: role$3
                              }, "Update BrightId role name").then(function (param) {
                              return UpdateOrReadGistJs.updateGist(guildId, {
                                          role: role$3
                                        });
                            }).then(function (param) {
                            message.reply("Succesfully update verified role to `" + role$3 + "`");
                            return Promise.resolve(message);
                          });
              }
              message.reply("Failed to retreive role data for guild");
              return Promise.reject({
                          RE_EXN_ID: RoleHandlerError,
                          _1: "Guild does not exist"
                        });
            }) : Promise.reject({
              RE_EXN_ID: RoleHandlerError,
              _1: "Role is empty"
            });
    } else {
      message.reply("Please specify a role -> `!role <role>`");
      tmp = Promise.reject({
            RE_EXN_ID: RoleHandlerError,
            _1: "No role specified"
          });
    }
  } else {
    message.reply("Must be an administrator");
    tmp = Promise.reject({
          RE_EXN_ID: RoleHandlerError,
          _1: "Administrator permissions are required"
        });
  }
  return $$Promise.$$catch(tmp, (function (e) {
                if (e.RE_EXN_ID === RoleHandlerError) {
                  console.error(e._1);
                } else if (e.RE_EXN_ID === $$Promise.JsError) {
                  var msg = e._1.message;
                  if (msg !== undefined) {
                    console.error(msg);
                  } else {
                    console.error("Must be some non-error value");
                  }
                } else {
                  console.error("Some unknown error");
                }
                return Promise.resolve(message);
              }));
}

exports.RoleHandlerError = RoleHandlerError;
exports.updateGist = updateGist;
exports.readGist = readGist;
exports.newRoleRe = newRoleRe;
exports.getRolebyRoleName = getRolebyRoleName;
exports.role = role;
/* ../updateOrReadGist.js Not a pure module */
