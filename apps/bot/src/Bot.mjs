// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "./Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Gist$Utils from "@brightidbot/utils/src/Gist.mjs";
import * as DiscordJs from "discord.js";
import * as Commands_Help from "./commands/Commands_Help.mjs";
import * as Commands_Role from "./commands/Commands_Role.mjs";
import * as Buttons_Verify from "./buttons/Buttons_Verify.mjs";
import * as Commands_Guild from "./commands/Commands_Guild.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Commands_Invite from "./commands/Commands_Invite.mjs";
import * as Commands_Verify from "./commands/Commands_Verify.mjs";
import * as UpdateOrReadGistMjs from "./updateOrReadGist.mjs";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

var RequestHandlerError = /* @__PURE__ */Caml_exceptions.create("Bot.RequestHandlerError");

var GuildNotInGist = /* @__PURE__ */Caml_exceptions.create("Bot.GuildNotInGist");

function updateGist(prim0, prim1) {
  return UpdateOrReadGistMjs.updateGist(prim0, prim1);
}

Env.createEnv(undefined);

var envConfig = Env.getConfig(undefined);

var envConfig$1;

if (envConfig.TAG === /* Ok */0) {
  envConfig$1 = envConfig._0;
} else {
  throw {
        RE_EXN_ID: Env.EnvError,
        _1: envConfig._0,
        Error: new Error()
      };
}

var options = {
  intents: [
    "GUILDS",
    "GUILD_MESSAGES"
  ]
};

var client = new DiscordJs.Client(options);

var commands = new DiscordJs.Collection();

var buttons = new DiscordJs.Collection();

commands.set(Commands_Help.data.name, {
              data: Commands_Help.data,
              execute: Commands_Help.execute
            }).set(Commands_Verify.data.name, {
            data: Commands_Verify.data,
            execute: Commands_Verify.execute
          }).set(Commands_Role.data.name, {
          data: Commands_Role.data,
          execute: Commands_Role.execute
        }).set(Commands_Invite.data.name, {
        data: Commands_Invite.data,
        execute: Commands_Invite.execute
      }).set(Commands_Guild.data.name, {
      data: Commands_Guild.data,
      execute: Commands_Guild.execute
    });

buttons.set(Buttons_Verify.customId, {
      customId: Buttons_Verify.customId,
      execute: Buttons_Verify.execute
    });

var guild = Json_Decode$JsonCombinators.object(function (field) {
      return {
              role: field.optional("role", Json_Decode$JsonCombinators.string),
              name: field.optional("name", Json_Decode$JsonCombinators.string),
              inviteLink: field.optional("inviteLink", Json_Decode$JsonCombinators.string),
              roleId: field.optional("roleId", Json_Decode$JsonCombinators.string)
            };
    });

var brightIdGuilds = Json_Decode$JsonCombinators.dict(guild);

function updateGistOnGuildCreate(guild, roleId) {
  var guildId = guild.id;
  return UpdateOrReadGistMjs.updateGist(guildId, {
              name: guild.name,
              role: "Verified",
              roleId: roleId
            });
}

function onGuildCreate(guild) {
  var roleManager = guild.roles;
  roleManager.create({
          name: "Verified",
          color: "ORANGE",
          reason: "Create a role to mark verified users with BrightID"
        }).then(function (role) {
        return updateGistOnGuildCreate(guild, role.id);
      });
}

function onInteraction(interaction) {
  var isCommand = interaction.isCommand();
  var isButton = interaction.isButton();
  var user = interaction.user;
  if (isCommand) {
    if (isButton) {
      console.error("Bot.res: Unknown interaction");
      return ;
    }
    var commandName = interaction.commandName;
    var command = commands.get(commandName);
    if (command == null) {
      console.error("Bot.res: Command not found");
    } else {
      Curry._1(command.execute, interaction).then(function (param) {
            return Promise.resolve((console.log("Successfully served the command " + commandName + " for " + user.username + ""), undefined));
          });
    }
    return ;
  }
  if (isButton) {
    var buttonCustomId = interaction.customId;
    var button = buttons.get(buttonCustomId);
    if (button == null) {
      console.error("Bot.res: Button not found");
    } else {
      Curry._1(button.execute, interaction).then(function (param) {
            return Promise.resolve((console.log("Successfully served button press \"" + buttonCustomId + "\" for " + user.username + ""), undefined));
          });
    }
    return ;
  }
  console.error("Bot.res: Unknown interaction");
}

function onGuildDelete(guild) {
  var config = Gist$Utils.makeGistConfig(Gist$Utils.envConfig.gistId, "guildData.json", Gist$Utils.githubAccessToken);
  var guildId = guild.id;
  $$Promise.$$catch(Gist$Utils.ReadGist.content(config, brightIdGuilds).then(function (content) {
            var brightIdGuild = Js_dict.get(content, guildId);
            if (brightIdGuild === undefined) {
              return Promise.resolve((console.log("No role to delete for guild " + guildId + ""), undefined));
            }
            var __x = guild.id;
            return Gist$Utils.UpdateGist.removeEntry(content, __x, config).then(function (param) {
                        return Promise.resolve(undefined);
                      });
          }), (function (err) {
          console.error(err);
          return Promise.resolve(undefined);
        }));
}

client.on("ready", (function (param) {
        console.log("Logged In");
      }));

client.on("guildCreate", onGuildCreate);

client.on("interactionCreate", onInteraction);

client.on("guildDelete", onGuildDelete);

client.login(envConfig$1.discordApiToken);

export {
  RequestHandlerError ,
  GuildNotInGist ,
  updateGist ,
  envConfig$1 as envConfig,
  options ,
  client ,
  commands ,
  buttons ,
  guild ,
  brightIdGuilds ,
  updateGistOnGuildCreate ,
  onGuildCreate ,
  onInteraction ,
  onGuildDelete ,
}
/*  Not a pure module */
