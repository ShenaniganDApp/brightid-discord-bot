// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Dotenv from "dotenv";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as FindUp from "find-up";
import * as Process from "process";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var EnvError = /* @__PURE__ */Caml_exceptions.create("Env.EnvError");

var nodeEnv = Process.env;

function createEnv(param) {
  var envFile = Js_dict.get(nodeEnv, "ENV_FILE");
  var path = envFile !== undefined ? FindUp.findUpSync(envFile, undefined) : FindUp.findUpSync(".env.local", undefined);
  Dotenv.config({
        path: path
      });
  
}

function env(name) {
  var value = Js_dict.get(nodeEnv, name);
  if (value !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: value
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: "Environment variable " + name + " is missing"
          };
  }
}

function getConfig(param) {
  var match = env("DISCORD_API_TOKEN");
  var match$1 = env("DISCORD_CLIENT_ID");
  var match$2 = env("UUID_NAMESPACE");
  if (match.TAG === /* Ok */0) {
    if (match$1.TAG === /* Ok */0) {
      if (match$2.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  discordApiToken: match._0,
                  discordClientId: match$1._0,
                  uuidNamespace: match$2._0
                }
              };
      } else {
        return match$2;
      }
    } else {
      return match$1;
    }
  } else {
    return match;
  }
}

export {
  EnvError ,
  nodeEnv ,
  createEnv ,
  env ,
  getConfig ,
  
}
/* nodeEnv Not a pure module */
