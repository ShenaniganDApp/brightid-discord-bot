// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "../../../node_modules/@rescript/core/src/Core__Int.js";
import * as Core__JSON from "../../../node_modules/@rescript/core/src/Core__JSON.js";
import * as Caml_option from "../../../node_modules/rescript/lib/es6/caml_option.js";
import * as Core__Option from "../../../node_modules/@rescript/core/src/Core__Option.js";
import * as Core__Promise from "../../../node_modules/@rescript/core/src/Core__Promise.js";
import * as Webapi__Fetch from "../../../node_modules/rescript-webapi/src/Webapi/Webapi__Fetch.js";
import * as Core__Nullable from "../../../node_modules/@rescript/core/src/Core__Nullable.js";
import * as Caml_exceptions from "../../../node_modules/rescript/lib/es6/caml_exceptions.js";

var DiscordRateLimited = /* @__PURE__ */Caml_exceptions.create("DiscordServer.DiscordRateLimited");

var botToken = process.env.DISCORD_API_TOKEN;

function mapGuildOauthRecord(decodedGuilds) {
  return Core__Option.map(decodedGuilds, (function (guilds) {
                return guilds.map(function (guild) {
                            var guild$1 = Core__JSON.Decode.object(guild);
                            return {
                                    id: Core__Option.getExn(Core__Option.flatMap(guild$1["id"], Core__JSON.Decode.string)),
                                    name: Core__Option.getExn(Core__Option.flatMap(guild$1["name"], Core__JSON.Decode.string)),
                                    icon: Core__Option.flatMap(guild$1["icon"], Core__JSON.Decode.string)
                                  };
                          });
              }));
}

function mapGuildRecord(decodedGuild) {
  if (decodedGuild === undefined) {
    return ;
  }
  var guild = Caml_option.valFromOption(decodedGuild);
  return {
          id: Core__Option.getExn(Core__Option.flatMap(guild["id"], Core__JSON.Decode.string)),
          name: Core__Option.getExn(Core__Option.flatMap(guild["name"], Core__JSON.Decode.string)),
          icon: Core__Option.flatMap(guild["icon"], Core__JSON.Decode.string),
          roles: Core__Option.getExn(Core__Option.flatMap(guild["roles"], Core__JSON.Decode.array)),
          owner_id: Core__Option.getExn(Core__Option.flatMap(guild["owner_id"], Core__JSON.Decode.string))
        };
}

function mapGuildMemberRecord(decodedGuildMember) {
  if (decodedGuildMember !== undefined) {
    return {
            roles: Core__Option.getExn(Core__Option.map(Core__Option.flatMap(Caml_option.valFromOption(decodedGuildMember)["roles"], Core__JSON.Decode.array), (function (roles) {
                        return roles.map(function (role) {
                                    return Core__Option.getExn(Core__JSON.Decode.string(role));
                                  });
                      })))
          };
  }
  
}

function mapRoleRecord(decodedRoles) {
  return Core__Option.map(decodedRoles, (function (roles) {
                return roles.map(function (role) {
                            var role$1 = Core__JSON.Decode.object(role);
                            return {
                                    id: Core__Option.getExn(Core__Option.flatMap(role$1["id"], Core__JSON.Decode.string)),
                                    name: Core__Option.getExn(Core__Option.flatMap(role$1["name"], Core__JSON.Decode.string)),
                                    permissions: Core__Option.getExn(Core__Option.flatMap(role$1["permissions"], Core__JSON.Decode.$$float))
                                  };
                          });
              }));
}

function sleep(_ms) {
  return (new Promise((resolve) => setTimeout(resolve, _ms)));
}

function fetchBotGuilds(afterOpt, allGuildsOpt, param) {
  var after = afterOpt !== undefined ? afterOpt : 0;
  var allGuilds = allGuildsOpt !== undefined ? allGuildsOpt : [];
  var headers = {
    Authorization: "Bot " + botToken + ""
  };
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return Core__Promise.$$catch(fetch(new Request("https://discord.com/api/users/@me/guilds?after=" + after.toString() + "", init)).then(function (res) {
                    return res.json();
                  }).then(function (json) {
                  var match = Core__JSON.Decode.array(json);
                  if (match !== undefined) {
                    var guilds = mapGuildOauthRecord(Core__JSON.Decode.array(json));
                    if (guilds.length <= 1) {
                      return Promise.resolve(allGuilds.concat(guilds));
                    }
                    var last = guilds.length - 1 | 0;
                    var after$1 = Core__Option.map(guilds[last], (function (guild) {
                            return Core__Int.fromString(undefined, guild.id);
                          }));
                    var allGuilds$1 = allGuilds.concat(guilds);
                    return fetchBotGuilds(after$1, allGuilds$1, undefined);
                  }
                  var rateLimit = Core__JSON.Decode.object(json);
                  var retry_after = Core__Option.flatMap(rateLimit["retry_after"], Core__JSON.Decode.$$float);
                  var retry_after$1;
                  if (retry_after !== undefined) {
                    retry_after$1 = (retry_after | 0) + 100 | 0;
                  } else {
                    throw {
                          RE_EXN_ID: DiscordRateLimited,
                          Error: new Error()
                        };
                  }
                  console.log("Discord Rate Limited: Retrying fetch for guilds after: " + after.toString() + " in " + retry_after$1.toString() + "ms");
                  return sleep(retry_after$1).then(function (param) {
                              return fetchBotGuilds(after, allGuilds, undefined);
                            });
                }), (function (e) {
                if (e.RE_EXN_ID === DiscordRateLimited) {
                  throw e;
                }
                return Promise.resolve(allGuilds);
              }));
}

function fetchBotGuildsLimit(after) {
  var headers = {
    Authorization: "Bot " + botToken + ""
  };
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  if (after !== undefined) {
    return Core__Promise.$$catch(fetch(new Request("https://discord.com/api/users/@me/guilds?after=" + after + "", init)).then(function (res) {
                      return res.json();
                    }).then(function (json) {
                    var match = Core__JSON.Decode.array(json);
                    if (match !== undefined) {
                      var guilds = mapGuildOauthRecord(Core__JSON.Decode.array(json));
                      var last = guilds.length - 1 | 0;
                      var after$1 = Core__Option.map(guilds[last], (function (guild) {
                              return guild.id;
                            }));
                      return Promise.resolve({
                                  guilds: guilds,
                                  after: after$1
                                });
                    }
                    var rateLimit = Core__JSON.Decode.object(json);
                    var retry_after = Core__Option.flatMap(rateLimit["retry_after"], Core__JSON.Decode.$$float);
                    var retry_after$1;
                    if (retry_after !== undefined) {
                      retry_after$1 = (retry_after | 0) + 100 | 0;
                    } else {
                      throw {
                            RE_EXN_ID: DiscordRateLimited,
                            Error: new Error()
                          };
                    }
                    console.log("Discord Rate Limited: Retrying fetch for guilds after: " + after + " in " + retry_after$1.toString() + "ms");
                    return sleep(retry_after$1).then(function (param) {
                                return fetchBotGuildsLimit(after);
                              });
                  }), (function (e) {
                  if (e.RE_EXN_ID === DiscordRateLimited) {
                    throw e;
                  }
                  return Promise.resolve({
                              guilds: [],
                              after: after
                            });
                }));
  } else {
    return Promise.resolve({
                guilds: [],
                after: after
              });
  }
}

function fetchUserGuilds(user) {
  var headers = {
    Authorization: "Bearer " + user.accessToken + ""
  };
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return Core__Promise.$$catch(fetch(new Request("https://discord.com/api/users/@me/guilds", init)).then(function (res) {
                    return res.json();
                  }).then(function (json) {
                  var match = Core__JSON.Decode.array(json);
                  if (match !== undefined) {
                    return Promise.resolve(mapGuildOauthRecord(Core__JSON.Decode.array(json)));
                  }
                  var rateLimit = Core__JSON.Decode.object(json);
                  var retry_after = Core__Option.flatMap(rateLimit["retry_after"], Core__JSON.Decode.$$float);
                  var retry_after$1;
                  if (retry_after !== undefined) {
                    retry_after$1 = (retry_after | 0) + 100 | 0;
                  } else {
                    throw {
                          RE_EXN_ID: DiscordRateLimited,
                          Error: new Error()
                        };
                  }
                  console.log("Discord Rate Limited: Retrying fetch user guilds in " + retry_after$1.toString() + "ms");
                  return sleep(retry_after$1).then(function (param) {
                              return fetchUserGuilds(user);
                            });
                }), (function (e) {
                if (e.RE_EXN_ID === DiscordRateLimited) {
                  throw e;
                }
                return Promise.resolve([]);
              }));
}

function fetchDiscordGuildFromId(guildId) {
  var headers = {
    Authorization: "Bot " + botToken + ""
  };
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return fetch(new Request("https://discord.com/api/guilds/" + guildId + "", init)).then(function (res) {
                return res.json();
              }).then(function (json) {
              return Promise.resolve(Core__Nullable.fromOption(mapGuildRecord(Core__JSON.Decode.object(json))));
            });
}

function fetchGuildMemberFromId(guildId, userId) {
  var headers = {
    Authorization: "Bot " + botToken + ""
  };
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return fetch(new Request("https://discord.com/api/guilds/" + guildId + "/members/" + userId + "", init)).then(function (res) {
                return res.json();
              }).then(function (json) {
              return Promise.resolve(Core__Nullable.fromOption(mapGuildMemberRecord(Core__JSON.Decode.object(json))));
            });
}

function fetchGuildRoles(guildId) {
  var headers = {
    Authorization: "Bot " + botToken + ""
  };
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return Core__Promise.$$catch(fetch(new Request("https://discord.com/api/guilds/" + guildId + "/roles", init)).then(function (res) {
                    return res.json();
                  }).then(function (json) {
                  var match = Core__JSON.Decode.array(json);
                  if (match !== undefined) {
                    return Promise.resolve(mapRoleRecord(Core__JSON.Decode.array(json)));
                  }
                  var rateLimit = Core__JSON.Decode.object(json);
                  var retry_after = Core__Option.flatMap(rateLimit["retry_after"], Core__JSON.Decode.$$float);
                  var retry_after$1;
                  if (retry_after !== undefined) {
                    retry_after$1 = (retry_after | 0) + 100 | 0;
                  } else {
                    throw {
                          RE_EXN_ID: DiscordRateLimited,
                          Error: new Error()
                        };
                  }
                  console.log("Discord Rate Limited: Retrying fetch guild: " + guildId + " roles in " + retry_after$1.toString() + "ms");
                  return sleep(retry_after$1).then(function (param) {
                              return fetchGuildRoles(guildId);
                            });
                }), (function (e) {
                if (e.RE_EXN_ID === DiscordRateLimited) {
                  throw e;
                }
                return Promise.resolve([]);
              }));
}

function memberIsAdmin(guildRoles, memberRoles) {
  var adminPerm = 0x0000000000000008;
  var memberRoles$1 = guildRoles.filter(function (role) {
        return memberRoles.includes(role.id);
      });
  return memberRoles$1.some(function (role) {
              return ((role.permissions & adminPerm)) === adminPerm;
            });
}

export {
  DiscordRateLimited ,
  botToken ,
  mapGuildOauthRecord ,
  mapGuildRecord ,
  mapGuildMemberRecord ,
  mapRoleRecord ,
  sleep ,
  fetchBotGuilds ,
  fetchBotGuildsLimit ,
  fetchUserGuilds ,
  fetchDiscordGuildFromId ,
  fetchGuildMemberFromId ,
  fetchGuildRoles ,
  memberIsAdmin ,
}
/* botToken Not a pure module */
