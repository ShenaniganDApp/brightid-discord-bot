// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../../../../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Remix from "remix";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as ReactProSidebar from "react-pro-sidebar";
import * as DiscordLogoutButton from "./DiscordLogoutButton.js";
import * as Rainbowkit from "@rainbow-me/rainbowkit";

var ConnectButton = {};

var state_userGuilds = [];

var state_botGuilds = [];

var state_after = "0";

var state = {
  userGuilds: state_userGuilds,
  botGuilds: state_botGuilds,
  after: state_after,
  loading: true
};

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* AddBotGuilds */0 :
        return {
                userGuilds: state.userGuilds,
                botGuilds: Belt_Array.concat(state.botGuilds, action._0),
                after: state.after,
                loading: state.loading
              };
    case /* UserGuilds */1 :
        return {
                userGuilds: action._0,
                botGuilds: state.botGuilds,
                after: state.after,
                loading: state.loading
              };
    case /* SetAfter */2 :
        return {
                userGuilds: state.userGuilds,
                botGuilds: state.botGuilds,
                after: action._0,
                loading: state.loading
              };
    case /* SetLoading */3 :
        return {
                userGuilds: state.userGuilds,
                botGuilds: state.botGuilds,
                after: state.after,
                loading: action._0
              };
    
  }
}

function Sidebar(Props) {
  var toggled = Props.toggled;
  var handleToggleSidebar = Props.handleToggleSidebar;
  var user = Props.user;
  var fetcher = Remix.useFetcher();
  var match = React.useReducer(reducer, state);
  var dispatch = match[1];
  var state$1 = match[0];
  var icon = function (param) {
    var icon$1 = param.icon;
    if (icon$1 !== undefined) {
      return "https://cdn.discordapp.com/icons/" + param.id + "/" + icon$1 + ".png";
    } else {
      return "/assets/brightid_logo_white.png";
    }
  };
  React.useEffect((function () {
          var after = state$1.after;
          if (after !== undefined) {
            var match = fetcher.type;
            switch (match) {
              case "done" :
                  var data = fetcher.data;
                  if (data == null) {
                    Curry._1(dispatch, {
                          TAG: /* SetLoading */3,
                          _0: false
                        });
                    Curry._1(dispatch, {
                          TAG: /* SetAfter */2,
                          _0: undefined
                        });
                  } else {
                    var match$1 = data.userGuilds;
                    if (match$1.length !== 0) {
                      Curry._1(dispatch, {
                            TAG: /* UserGuilds */1,
                            _0: data.userGuilds
                          });
                    }
                    var match$2 = data.botGuilds;
                    if (match$2.length !== 0) {
                      Curry._1(dispatch, {
                            TAG: /* AddBotGuilds */0,
                            _0: data.botGuilds
                          });
                    } else {
                      Curry._1(dispatch, {
                            TAG: /* SetAfter */2,
                            _0: undefined
                          });
                    }
                    if (state$1.after === data.after) {
                      Curry._1(dispatch, {
                            TAG: /* SetAfter */2,
                            _0: undefined
                          });
                      Curry._1(dispatch, {
                            TAG: /* SetLoading */3,
                            _0: false
                          });
                    } else {
                      Curry._1(dispatch, {
                            TAG: /* SetAfter */2,
                            _0: data.after
                          });
                      fetcher.load("/Root_FetchGuilds?after=" + data.after + "");
                    }
                  }
                  break;
              case "init" :
                  fetcher.load("/Root_FetchGuilds?after=" + after + "");
                  Curry._1(dispatch, {
                        TAG: /* SetLoading */3,
                        _0: true
                      });
                  break;
              default:
                
            }
          }
          
        }), [fetcher]);
  var discordLogoutButton = (user == null) ? React.createElement(React.Fragment, undefined) : React.createElement(DiscordLogoutButton.make, {
          label: "â¤‡"
        });
  var guilds = state$1.userGuilds.filter(function (userGuild) {
        return state$1.botGuilds.findIndex(function (botGuild) {
                    return botGuild.id === userGuild.id;
                  }) !== -1;
      });
  var sidebarElements;
  if (user == null) {
    sidebarElements = React.createElement(React.Fragment, undefined);
  } else {
    var match$1 = state$1.botGuilds;
    var match$2 = state$1.userGuilds;
    var match$3 = state$1.loading;
    if (match$3) {
      var intersection = Belt_Array.mapWithIndex(guilds, (function (i, guild) {
              return React.createElement(ReactProSidebar.Menu, {
                          children: React.createElement(ReactProSidebar.MenuItem, {
                                children: React.createElement(Remix.Link, {
                                      className: "font-semibold text-xl",
                                      prefetch: "intent",
                                      to: "/guilds/" + guild.id + "",
                                      children: guild.name
                                    }),
                                className: "bg-extraDark",
                                icon: React.createElement("img", {
                                      className: " bg-extraDark rounded-lg border-1 border-white",
                                      src: icon(guild)
                                    })
                              }),
                          iconShape: "square",
                          key: String(i + 1 | 0)
                        });
            }));
      var loading = Belt_Array.map(Belt_Array.range(0, 4), (function (i) {
              return React.createElement(ReactProSidebar.Menu, {
                          children: React.createElement(ReactProSidebar.MenuItem, {
                                children: React.createElement("div", {
                                      className: "flex flex-col space-y-3"
                                    }, React.createElement("div", {
                                          className: "w-36 bg-gray-300 h-6 rounded-md "
                                        })),
                                className: "flex animate-pulse flex-row h-full bg-extraDark ",
                                icon: React.createElement("img", {
                                      className: " bg-extraDark  rounded-lg",
                                      src: "/assets/brightid_logo_white.png"
                                    })
                              }),
                          iconShape: "square",
                          key: String(i + 1 | 0)
                        });
            }));
      sidebarElements = Belt_Array.concat(intersection, loading);
    } else if (match$1.length !== 0) {
      if (match$2.length !== 0) {
        var match$4 = guilds.length;
        sidebarElements = match$4 !== 0 ? Belt_Array.mapWithIndex(guilds, (function (i, guild) {
                  return React.createElement(ReactProSidebar.Menu, {
                              children: React.createElement(ReactProSidebar.MenuItem, {
                                    children: React.createElement(Remix.Link, {
                                          className: "font-semibold text-xl",
                                          prefetch: "intent",
                                          to: "/guilds/" + guild.id + "",
                                          children: guild.name
                                        }),
                                    className: "bg-extraDark",
                                    icon: React.createElement("img", {
                                          className: " bg-extraDark rounded-lg border-1 border-white",
                                          src: icon(guild)
                                        })
                                  }),
                              iconShape: "square",
                              key: String(i + 1 | 0)
                            });
                })) : React.createElement("p", {
                className: "text-white"
              }, "No Guilds");
      } else {
        sidebarElements = React.createElement("p", {
              className: "text-white"
            }, "Couldn't load User Servers");
      }
    } else {
      sidebarElements = React.createElement("p", {
            className: "text-white"
          }, "Couldn't Load Bot Servers");
    }
  }
  return React.createElement(ReactProSidebar.ProSidebar, {
              children: null,
              className: "bg-dark scrollbar-hide",
              breakPoint: "md",
              onToggle: handleToggleSidebar,
              toggled: toggled
            }, React.createElement(ReactProSidebar.SidebarHeader, {
                  children: null,
                  className: "p-2 gap-3 flex justify-around items-center top-0 sticky bg-dark z-10 scrollbar-hide"
                }, React.createElement(Rainbowkit.ConnectButton, {}), discordLogoutButton), React.createElement(ReactProSidebar.SidebarContent, {
                  children: null,
                  className: "scrollbar-hide"
                }, React.createElement(ReactProSidebar.Menu, {
                      iconShape: "square",
                      key: String(0)
                    }), sidebarElements), React.createElement(ReactProSidebar.SidebarFooter, {
                  children: React.createElement(Remix.Link, {
                        to: "",
                        children: React.createElement(ReactProSidebar.MenuItem, {
                              children: React.createElement("img", {
                                    src: "/assets/brightid_reversed.svg"
                                  })
                            })
                      }),
                  className: "bg-extraDark bottom-0 sticky bg-dark scrollbar-hide"
                }));
}

var make = Sidebar;

export {
  ConnectButton ,
  state ,
  reducer ,
  make ,
}
/* react Not a pure module */
