// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Remix from "remix";
import * as Wagmi from "wagmi";
import * as $$Promise from "../../../node_modules/@ryyppy/rescript-promise/src/Promise.js";
import * as Sidebar from "./components/Sidebar.js";
import * as AuthServer from "./AuthServer.js";
import LodashMerge from "lodash.merge";
import * as DiscordServer from "./DiscordServer.js";
import * as Rainbowkit from "@rainbow-me/rainbowkit";

import rainbowKit from "@rainbow-me/rainbowkit/styles.css"
;

import proSidebar from "react-pro-sidebar/dist/css/styles.css"
;

import {
  apiProvider,
  configureChains,
  getDefaultWallets,
} from "@rainbow-me/rainbowkit";
import { chain, createClient } from "wagmi"
;

var WagmiProvider = {};

var LodashMerge$1 = {};

function meta(param) {
  return {
          title: "Bright ID Unique Bot"
        };
}

function links(param) {
  return [
          {
            rel: "stylesheet",
            href: (require("./styles/app.css"))
          },
          {
            rel: "stylesheet",
            href: rainbowKit
          },
          {
            rel: "stylesheet",
            href: proSidebar
          }
        ];
}

var idChain = {
  id: 74,
  name: "ID Chain",
  nativeCurrency: {
    name: "Eidi",
    symbol: "EIDI",
    decimals: 18
  },
  rpcUrls: {
    default: "https://idchain.one/rpc"
  },
  blockExplorers: [{
      name: "Blockscout",
      url: "https://explorer.idchain.one/"
    }]
};

var chainConfig = (configureChains(
  [idChain],
  [apiProvider.jsonRpc((chain) => ({ rpcUrl: chain.rpcUrls.default }))]
));

var defaultWallets = (getDefaultWallets({
  appName: "Bright ID Unique Bot",
  chains:chainConfig.chains,
}));

var wagmiClient = (createClient({
  autoConnect: true,
  connectors: defaultWallets.connectors,
  provider:chainConfig.provider,
  }));

function loader(param) {
  return $$Promise.$$catch(AuthServer.authenticator.isAuthenticated(param.request).then(function (user) {
                  return Promise.resolve({
                              user: user,
                              rateLimited: false
                            });
                }), (function (error) {
                if (error.RE_EXN_ID === DiscordServer.DiscordRateLimited) {
                  return Promise.resolve({
                              user: null,
                              rateLimited: true
                            });
                } else {
                  return Promise.resolve({
                              user: null,
                              rateLimited: false
                            });
                }
              }));
}

var myTheme = LodashMerge(Rainbowkit.darkTheme(), {
      colors: {
        accentColor: "#ed7a5c"
      }
    });

function unstable_shouldReload(param) {
  return false;
}

function Root$default(Props) {
  var match = Remix.useLoaderData();
  var match$1 = React.useState(function () {
        return false;
      });
  var setToggled = match$1[1];
  var handleToggleSidebar = function (value) {
    return Curry._1(setToggled, (function (_prev) {
                  return value;
                }));
  };
  return React.createElement("html", undefined, React.createElement("head", undefined, React.createElement("meta", {
                      charSet: "utf-8"
                    }), React.createElement("meta", {
                      content: "width=device-width,initial-scale=1",
                      name: "viewport"
                    }), React.createElement(Remix.Meta, {}), React.createElement(Remix.Links, {})), React.createElement("body", {
                  className: "h-screen w-screen bg-dark"
                }, React.createElement(Wagmi.WagmiProvider, {
                      client: wagmiClient,
                      children: React.createElement(Rainbowkit.RainbowKitProvider, {
                            chains: chainConfig.chains,
                            theme: myTheme,
                            children: React.createElement("div", {
                                  className: "flex h-screen w-screen"
                                }, React.createElement(Sidebar.make, {
                                      toggled: match$1[0],
                                      handleToggleSidebar: handleToggleSidebar,
                                      user: match.user
                                    }), React.createElement(Remix.Outlet, {
                                      context: {
                                        handleToggleSidebar: handleToggleSidebar,
                                        rateLimited: match.rateLimited
                                      }
                                    }))
                          })
                    }), React.createElement(Remix.ScrollRestoration, {}), React.createElement(Remix.Scripts, {}), process.env.NODE_ENV === "development" ? React.createElement(Remix.LiveReload, {}) : null));
}

var $$default = Root$default;

export {
  WagmiProvider ,
  LodashMerge$1 as LodashMerge,
  meta ,
  links ,
  idChain ,
  chainConfig ,
  defaultWallets ,
  wagmiClient ,
  loader ,
  myTheme ,
  unstable_shouldReload ,
  $$default ,
  $$default as default,
  
}
/*  Not a pure module */
