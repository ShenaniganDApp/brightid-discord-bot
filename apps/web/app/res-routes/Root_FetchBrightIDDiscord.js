// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Uuid from "uuid";
import * as Js_dict from "../../../../node_modules/rescript/lib/es6/js_dict.js";
import * as Js_json from "../../../../node_modules/rescript/lib/es6/js_json.js";
import * as AuthServer from "../AuthServer.js";
import * as Belt_Option from "../../../../node_modules/rescript/lib/es6/belt_Option.js";
import * as Brightid_sdk from "brightid_sdk";
import * as Webapi__Fetch from "../../../../node_modules/rescript-webapi/src/Webapi/Webapi__Fetch.js";
import * as Js_null_undefined from "../../../../node_modules/rescript/lib/es6/js_null_undefined.js";

var context = "Discord";

var brightIdVerificationEndpoint = "https://app.brightid.org/node/v5/verifications/Discord";

var brightIdAppEndpoint = "https://app.brightid.org/node/v5/apps/Discord";

async function loader(param) {
  var uuidNamespace = process.env.UUID_NAMESPACE;
  var init = Webapi__Fetch.RequestInit.make(/* Get */0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  var req = new Request(brightIdVerificationEndpoint, init);
  var res = await fetch(req);
  var json = await res.json();
  var data = Belt_Option.getExn(Js_dict.get(Js_json.decodeObject(json), "data"));
  var verificationCount = Js_null_undefined.fromOption(Belt_Option.flatMap(Js_dict.get(Js_json.decodeObject(data), "count"), Js_json.decodeNumber));
  var req$1 = new Request(brightIdAppEndpoint, init);
  var res$1 = await fetch(req$1);
  var json$1 = await res$1.json();
  var data$1 = Belt_Option.getExn(Js_dict.get(Js_json.decodeObject(json$1), "data"));
  var unusedSponsorships = Js_null_undefined.fromOption(Belt_Option.flatMap(Js_dict.get(Js_json.decodeObject(data$1), "unusedSponsorships"), Js_json.decodeNumber));
  var assignedSponsorships = Js_null_undefined.fromOption(Belt_Option.flatMap(Js_dict.get(Js_json.decodeObject(data$1), "assignedSponsorships"), Js_json.decodeNumber));
  var user = await AuthServer.authenticator.isAuthenticated(param.request);
  if (user == null) {
    return {
            user: null,
            verificationCount: verificationCount,
            unusedSponsorships: unusedSponsorships,
            assignedSponsorships: assignedSponsorships,
            verifyStatus: /* NotVerified */2
          };
  }
  var userId = user.profile.id;
  var contextId = Uuid.v5(userId, uuidNamespace);
  var json$2 = await Brightid_sdk.verifyContextId(context, contextId, undefined);
  var unique = Belt_Option.flatMap(Js_dict.get(Js_json.decodeObject(json$2), "unique"), Js_json.decodeBoolean);
  var verifyStatus;
  if (unique !== undefined) {
    verifyStatus = /* Unique */4;
  } else {
    var data$2 = Belt_Option.getExn(Js_dict.get(Js_json.decodeObject(json$2), "data"));
    var errorNum = Belt_Option.flatMap(Js_dict.get(Js_json.decodeObject(data$2), "errorNum"), Js_json.decodeNumber);
    verifyStatus = errorNum !== undefined ? (
        errorNum !== 2 ? (
            errorNum !== 3 ? (
                errorNum !== 4 ? /* Unknown */0 : /* NotSponsored */3
              ) : /* NotVerified */2
          ) : /* NotLinked */1
      ) : /* Unknown */0;
  }
  return {
          user: user,
          verificationCount: verificationCount,
          unusedSponsorships: unusedSponsorships,
          assignedSponsorships: assignedSponsorships,
          verifyStatus: verifyStatus
        };
}

export {
  context ,
  brightIdVerificationEndpoint ,
  brightIdAppEndpoint ,
  loader ,
}
/* uuid Not a pure module */
