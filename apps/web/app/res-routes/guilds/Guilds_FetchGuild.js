// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "../../../../../node_modules/rescript/lib/es6/js_dict.js";
import * as $$Promise from "../../../../../node_modules/@ryyppy/rescript-promise/src/Promise.js";
import * as AuthServer from "../../AuthServer.js";
import * as Belt_Option from "../../../../../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../../../../../node_modules/rescript/lib/es6/caml_option.js";
import * as Decode$Shared from "../../../node_modules/@brightidbot/shared/src/Decode.js";
import * as DiscordServer from "../../DiscordServer.js";
import * as WebUtils_Gist from "../../utils/WebUtils_Gist.js";

function loader(param) {
  var config = WebUtils_Gist.makeGistConfig(process.env.GIST_ID, "guildData.json", process.env.GITHUB_ACCESS_TOKEN);
  var guildId = Belt_Option.getWithDefault(Js_dict.get(param.params, "guildId"), "");
  return $$Promise.$$catch(AuthServer.authenticator.isAuthenticated(param.request).then(function (maybeUser) {
                  if (maybeUser == null) {
                    return Promise.resolve({
                                maybeDiscordGuild: undefined,
                                maybeBrightIdGuild: undefined,
                                isAdmin: false
                              });
                  } else {
                    return WebUtils_Gist.ReadGist.content(config, Decode$Shared.Decode_Gist.brightIdGuilds).then(function (brightIdGuilds) {
                                var maybeBrightIdGuild = Js_dict.get(brightIdGuilds, guildId);
                                return DiscordServer.fetchDiscordGuildFromId(guildId).then(function (maybeDiscordGuild) {
                                            var userId = maybeUser.profile.id;
                                            return DiscordServer.fetchGuildMemberFromId(guildId, userId).then(function (guildMember) {
                                                        var memberRoles = (guildMember == null) ? [] : guildMember.roles;
                                                        return DiscordServer.fetchGuildRoles(guildId).then(function (guildRoles) {
                                                                    var isAdmin = DiscordServer.memberIsAdmin(guildRoles, memberRoles);
                                                                    var isOwner = (maybeDiscordGuild == null) ? false : maybeDiscordGuild.owner_id === userId;
                                                                    return Promise.resolve({
                                                                                maybeDiscordGuild: (maybeDiscordGuild == null) ? undefined : Caml_option.some(maybeDiscordGuild),
                                                                                maybeBrightIdGuild: maybeBrightIdGuild,
                                                                                isAdmin: isAdmin || isOwner
                                                                              });
                                                                  });
                                                      });
                                          });
                              });
                  }
                }), (function (error) {
                return Promise.resolve({
                            maybeDiscordGuild: undefined,
                            maybeBrightIdGuild: undefined,
                            isAdmin: false
                          });
              }));
}

export {
  loader ,
}
/* AuthServer Not a pure module */
