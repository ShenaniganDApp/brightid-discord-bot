// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../../../../../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Remix from "remix";
import * as Js_dict from "../../../../../node_modules/rescript/lib/es6/js_dict.js";
import * as Caml_obj from "../../../../../node_modules/rescript/lib/es6/caml_obj.js";
import * as AuthServer from "../../AuthServer.js";
import * as Belt_Option from "../../../../../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../../../../../node_modules/rescript/lib/es6/caml_option.js";
import * as SubmitPopup from "../../components/SubmitPopup.js";
import * as DiscordServer from "../../DiscordServer.js";
import * as Helpers_Guild from "../../helpers/Helpers_Guild.js";
import * as SidebarToggle from "../../components/SidebarToggle.js";
import * as WebUtils_Gist from "../../utils/WebUtils_Gist.js";
import * as Caml_exceptions from "../../../../../node_modules/rescript/lib/es6/caml_exceptions.js";
import * as ReactHotToast from "react-hot-toast";
import * as Js_null_undefined from "../../../../../node_modules/rescript/lib/es6/js_null_undefined.js";
import * as Json_Decode$JsonCombinators from "../../../../../node_modules/@glennsl/rescript-json-combinators/src/Json_Decode.js";

var NoBrightIdData = /* @__PURE__ */Caml_exceptions.create("Guilds_Admin.NoBrightIdData");

function loader(param) {
  var brightIdGuild = Json_Decode$JsonCombinators.object(function (field) {
        return {
                role: field.optional("role", Json_Decode$JsonCombinators.string),
                name: field.optional("name", Json_Decode$JsonCombinators.string),
                inviteLink: field.optional("inviteLink", Json_Decode$JsonCombinators.string),
                roleId: field.optional("roleId", Json_Decode$JsonCombinators.string)
              };
      });
  var brightIdGuilds = Json_Decode$JsonCombinators.dict(brightIdGuild);
  var config = WebUtils_Gist.makeGistConfig(process.env.GIST_ID, "guildData.json", process.env.GITHUB_ACCESS_TOKEN);
  var guildId = Belt_Option.getWithDefault(Js_dict.get(param.params, "guildId"), "");
  return AuthServer.authenticator.isAuthenticated(param.request).then(function (user) {
              return WebUtils_Gist.ReadGist.content(config, brightIdGuilds).then(function (guilds) {
                          if (user == null) {
                            return Promise.resolve({
                                        user: null,
                                        brightIdGuild: null,
                                        guild: null,
                                        isAdmin: false
                                      });
                          }
                          var guildData = Belt_Option.getExn(Js_dict.get(guilds, guildId));
                          return DiscordServer.fetchGuildFromId(guildId).then(function (guild) {
                                      var userId = user.profile.id;
                                      return DiscordServer.fetchGuildMemberFromId(guildId, userId).then(function (guildMember) {
                                                  var memberRoles = (guildMember == null) ? [] : guildMember.roles;
                                                  return DiscordServer.fetchGuildRoles(guildId).then(function (guildRoles) {
                                                              var isAdmin = DiscordServer.memberIsAdmin(guildRoles, memberRoles);
                                                              var isOwner = (guild == null) ? false : guild.owner_id === userId;
                                                              var brightIdGuild_name = Js_null_undefined.fromOption(guildData.name);
                                                              var brightIdGuild_role = Js_null_undefined.fromOption(guildData.role);
                                                              var brightIdGuild_inviteLink = Js_null_undefined.fromOption(guildData.inviteLink);
                                                              var brightIdGuild_sponsorshipAddress = null;
                                                              var brightIdGuild_roleId = Js_null_undefined.fromOption(guildData.roleId);
                                                              var brightIdGuild = {
                                                                name: brightIdGuild_name,
                                                                role: brightIdGuild_role,
                                                                inviteLink: brightIdGuild_inviteLink,
                                                                sponsorshipAddress: brightIdGuild_sponsorshipAddress,
                                                                roleId: brightIdGuild_roleId
                                                              };
                                                              return Promise.resolve({
                                                                          user: user,
                                                                          brightIdGuild: brightIdGuild,
                                                                          guild: guild,
                                                                          isAdmin: isAdmin || isOwner
                                                                        });
                                                            });
                                                });
                                    });
                        });
            });
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* RoleChanged */0 :
        return {
                role: action._0,
                inviteLink: state.inviteLink,
                sponsorshipAddress: state.sponsorshipAddress
              };
    case /* InviteLinkChanged */1 :
        return {
                role: state.role,
                inviteLink: action._0,
                sponsorshipAddress: state.sponsorshipAddress
              };
    case /* SponsorshipAddressChanged */2 :
        return {
                role: state.role,
                inviteLink: state.inviteLink,
                sponsorshipAddress: action._0
              };
    
  }
}

function Guilds_Admin$default(Props) {
  var context = Remix.useOutletContext();
  var match = Remix.useLoaderData();
  var guild = match.guild;
  var brightIdGuild = match.brightIdGuild;
  console.log("brightIdGuild: ", brightIdGuild);
  var match$1 = Remix.useParams();
  var guildId = match$1.guildId;
  var state;
  if (brightIdGuild == null) {
    throw {
          RE_EXN_ID: NoBrightIdData,
          Error: new Error()
        };
  }
  state = {
    role: Caml_option.nullable_to_opt(brightIdGuild.role),
    inviteLink: Caml_option.nullable_to_opt(brightIdGuild.inviteLink),
    sponsorshipAddress: Caml_option.nullable_to_opt(brightIdGuild.sponsorshipAddress)
  };
  var match$2 = React.useReducer(reducer, state);
  var dispatch = match$2[1];
  var state$1 = match$2[0];
  var reset = function (param) {
    if (brightIdGuild == null) {
      throw {
            RE_EXN_ID: NoBrightIdData,
            Error: new Error()
          };
    }
    Curry._1(dispatch, {
          TAG: /* RoleChanged */0,
          _0: Caml_option.nullable_to_opt(brightIdGuild.role)
        });
    Curry._1(dispatch, {
          TAG: /* InviteLinkChanged */1,
          _0: Caml_option.nullable_to_opt(brightIdGuild.inviteLink)
        });
    Curry._1(dispatch, {
          TAG: /* SponsorshipAddressChanged */2,
          _0: Caml_option.nullable_to_opt(brightIdGuild.sponsorshipAddress)
        });
  };
  var onRoleChanged = function (e) {
    var value = e.currentTarget.value;
    Curry._1(dispatch, {
          TAG: /* RoleChanged */0,
          _0: (value == null) ? undefined : Caml_option.some(value)
        });
  };
  var onInviteLinkChanged = function (e) {
    var value = e.currentTarget.value;
    Curry._1(dispatch, {
          TAG: /* InviteLinkChanged */1,
          _0: (value == null) ? undefined : Caml_option.some(value)
        });
  };
  var hasChangesToSave;
  if (brightIdGuild == null) {
    hasChangesToSave = false;
  } else {
    var defaultState_role = Caml_option.nullable_to_opt(brightIdGuild.role);
    var defaultState_inviteLink = Caml_option.nullable_to_opt(brightIdGuild.inviteLink);
    var defaultState_sponsorshipAddress = Caml_option.nullable_to_opt(brightIdGuild.sponsorshipAddress);
    var defaultState = {
      role: defaultState_role,
      inviteLink: defaultState_inviteLink,
      sponsorshipAddress: defaultState_sponsorshipAddress
    };
    hasChangesToSave = Caml_obj.notequal(defaultState, state$1);
  }
  if (match.isAdmin) {
    if (guild == null) {
      return React.createElement("div", {
                  className: "flex justify-center items-center text-white text-3xl font-bold"
                }, React.createElement("div", undefined, "This server does not exist"));
    } else {
      return React.createElement("div", {
                  className: "flex-1 p-4"
                }, React.createElement(ReactHotToast.Toaster, {}), React.createElement("div", {
                      className: "flex flex-col flex-1 h-full"
                    }, React.createElement("header", {
                          className: "flex flex-row justify-between md:justify-end m-4"
                        }, React.createElement(SidebarToggle.make, {
                              handleToggleSidebar: context.handleToggleSidebar
                            }), React.createElement(Remix.Link, {
                              className: "p-4 bg-brightid font-semibold rounded-3xl text-xl text-white",
                              to: "/guilds/" + guildId + "",
                              children: "⬅️ Go Back"
                            })), React.createElement(Remix.Form, {
                          className: "flex-1 text-white text-2xl font-semibold justify-center items-center relative",
                          children: null,
                          method: "post",
                          action: "/guilds/" + guildId + "/adminSubmit"
                        }, React.createElement("div", undefined, React.createElement("div", undefined, "Admin Commands")), React.createElement("div", {
                              className: "flex flex-1 justify-around"
                            }, React.createElement("img", {
                                  className: "w-48 h-48 p-5",
                                  src: Helpers_Guild.iconUri(guild)
                                }), (brightIdGuild == null) ? React.createElement("div", {
                                    className: "text-white text-2xl font-semibold justify-center items-center"
                                  }, React.createElement("div", undefined, "This server is not using BrightID")) : React.createElement("div", {
                                    className: "flex flex-col flex-1 justify-center items-start gap-4"
                                  }, React.createElement("label", {
                                        className: "flex flex-col gap-2"
                                      }, "Role", React.createElement("input", {
                                            className: "text-white p-2 rounded bg-extraDark",
                                            name: "role",
                                            placeholder: "No Role Name",
                                            type: "text",
                                            value: Belt_Option.getWithDefault(state$1.role, Belt_Option.getWithDefault(Caml_option.nullable_to_opt(brightIdGuild.role), "")),
                                            onChange: onRoleChanged
                                          })), React.createElement("label", {
                                        className: "flex flex-col gap-2"
                                      }, "Invite", React.createElement("input", {
                                            className: "text-white p-2 bg-extraDark",
                                            name: "inviteLink",
                                            placeholder: "No Invite Link",
                                            type: "text",
                                            value: Belt_Option.getWithDefault(state$1.inviteLink, Belt_Option.getWithDefault(Caml_option.nullable_to_opt(brightIdGuild.inviteLink), "")),
                                            onChange: onInviteLinkChanged
                                          })), React.createElement("label", {
                                        className: "flex flex-col gap-2"
                                      }, "Sponsorship Address", React.createElement("div", {
                                            className: "flex flex-row gap-4"
                                          }, React.createElement("input", {
                                                className: "text-white p-2 bg-extraDark",
                                                name: "sponsorshipAddress",
                                                placeholder: "No Sponsorship Address",
                                                readOnly: true,
                                                type: "text",
                                                value: Belt_Option.getWithDefault(state$1.sponsorshipAddress, Belt_Option.getWithDefault(Caml_option.nullable_to_opt(brightIdGuild.sponsorshipAddress), ""))
                                              }), React.createElement("button", {
                                                className: "p-2 bg-transparent border-3 border-brightid text-white font-xl rounded"
                                              }, "Sign"))))), React.createElement(SubmitPopup.make, {
                              hasChangesToSave: hasChangesToSave,
                              reset: reset
                            }))));
    }
  } else {
    return React.createElement("div", {
                className: "flex flex-1"
              }, React.createElement("header", {
                    className: "flex flex-row justify-between md:justify-end m-4"
                  }, React.createElement(SidebarToggle.make, {
                        handleToggleSidebar: context.handleToggleSidebar
                      }), React.createElement(Remix.Link, {
                        className: "p-4 bg-brightid font-semibold rounded-3xl text-xl text-white",
                        to: "/guilds/" + guildId + "",
                        children: "⬅️ Go Back"
                      })), React.createElement("div", {
                    className: "flex justify-center items-center text-white text-3xl font-bold"
                  }, React.createElement("div", undefined, "You are not an admin in this server")));
  }
}

var state = {
  role: undefined,
  inviteLink: undefined,
  sponsorshipAddress: undefined
};

var $$default = Guilds_Admin$default;

export {
  NoBrightIdData ,
  loader ,
  state ,
  reducer ,
  $$default ,
  $$default as default,
}
/* react Not a pure module */
