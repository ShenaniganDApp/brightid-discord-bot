// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Uuid from "uuid";
import * as Curry from "../../../../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as AuthServer from "../AuthServer.js";
import * as Caml_option from "../../../../node_modules/rescript/lib/es6/caml_option.js";
import * as Core__Option from "../../../../node_modules/@rescript/core/src/Core__Option.js";
import * as InviteButton from "../components/InviteButton.js";
import * as Brightid_sdk from "brightid_sdk";
import * as QrcodeReact from "qrcode.react";
import * as SidebarToggle from "../components/SidebarToggle.js";
import * as React$1 from "@remix-run/react";
import * as Constants$Shared from "../../node_modules/@brightidbot/shared/src/Constants.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "../../../../node_modules/rescript/lib/es6/caml_js_exceptions.js";
import * as DiscordLoginButton from "../components/DiscordLoginButton.js";
import * as DiscordLogoutButton from "../components/DiscordLogoutButton.js";
import * as Rainbowkit from "@rainbow-me/rainbowkit";

var QRCodeSvg = {};

function Root_Index$StatusToolTip(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("p", {
                    children: props.statusMessage,
                    className: "text-xl font-semibold "
                  }),
              className: Core__Option.getWithDefault(props.className, "")
            });
}

var StatusToolTip = {
  make: Root_Index$StatusToolTip
};

function getWindowDimensions(param) {
  var innerWidth = window.innerWidth;
  var innerHeight = window.innerHeight;
  return {
          width: innerWidth,
          height: innerHeight
        };
}

function useWindowDimensions(param) {
  var match = React.useState(function () {
        return {
                width: 0,
                height: 0
              };
      });
  var setWindowDimensions = match[1];
  React.useEffect((function () {
          Curry._1(setWindowDimensions, (function (param) {
                  return getWindowDimensions(undefined);
                }));
          var handleResize = function (param) {
            Curry._1(setWindowDimensions, (function (param) {
                    return getWindowDimensions(undefined);
                  }));
          };
          window.addEventListener("resize", handleResize);
          return (function (param) {
                    window.removeEventListener("resize", handleResize);
                  });
        }), []);
  return match[0];
}

function Root_Index$BrightIdToolTip(props) {
  var fetcher = props.fetcher;
  var match = fetcher.type;
  switch (match) {
    case "done" :
        var data = fetcher.data;
        if (data == null) {
          return JsxRuntime.jsx(JsxRuntime.Fragment, {});
        }
        var match$1 = data.user;
        if (match$1 == null) {
          return JsxRuntime.jsx(JsxRuntime.Fragment, {});
        }
        var match$2 = data.verifyStatus;
        switch (match$2) {
          case /* Unknown */0 :
              return JsxRuntime.jsx(Root_Index$StatusToolTip, {
                          className: "w-full text-center py-1 bg-red-600 text-white",
                          statusMessage: "Something went wrong when checking your BrightId status"
                        });
          case /* NotLinked */1 :
              return JsxRuntime.jsx(Root_Index$StatusToolTip, {
                          className: "w-full text-center py-1 bg-red-600 text-white",
                          statusMessage: "You have not linked BrightId to Discord"
                        });
          case /* NotVerified */2 :
              return JsxRuntime.jsx(Root_Index$StatusToolTip, {
                          className: "w-full text-center py-1 bg-red-600 text-white",
                          statusMessage: "You are not Verified"
                        });
          case /* NotSponsored */3 :
              return JsxRuntime.jsx(Root_Index$StatusToolTip, {
                          className: "w-full text-center py-1 bg-red-600 text-white",
                          statusMessage: "You are not Sponsored"
                        });
          case /* Unique */4 :
              return JsxRuntime.jsx(Root_Index$StatusToolTip, {
                          className: "w-full text-center py-1 bg-green-600 text-white",
                          statusMessage: "Verified with BrightID"
                        });
          
        }
    case "normalLoad" :
        if (Core__Option.isSome(props.maybeUser)) {
          return JsxRuntime.jsx(Root_Index$StatusToolTip, {
                      className: "w-full text-center py-1 bg-gray-400 animate-pulse text-black",
                      statusMessage: "Loading BrightID Status..."
                    });
        } else {
          return JsxRuntime.jsx(JsxRuntime.Fragment, {});
        }
    default:
      return JsxRuntime.jsx(JsxRuntime.Fragment, {});
  }
}

var BrightIdToolTip = {
  make: Root_Index$BrightIdToolTip
};

function Root_Index$BrightIdVerificationActions(props) {
  if (props.maybeUser === undefined) {
    return JsxRuntime.jsx(DiscordLoginButton.make, {
                label: "Login to Discord"
              });
  }
  var maybeDeeplink = props.maybeDeeplink;
  var fetcher = props.fetcher;
  var match = fetcher.type;
  switch (match) {
    case "done" :
        var data = fetcher.data;
        if (data == null) {
          return JsxRuntime.jsx(JsxRuntime.Fragment, {});
        }
        var match$1 = data.verifyStatus;
        switch (match$1) {
          case /* NotLinked */1 :
              if (maybeDeeplink !== undefined) {
                return JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("p", {
                                    children: "Scan this code in the BrightID App",
                                    className: "text-2xl text-white"
                                  }),
                              JsxRuntime.jsx(QrcodeReact.QRCodeSVG, {
                                    value: maybeDeeplink
                                  }),
                              JsxRuntime.jsx("a", {
                                    children: "Click here for mobile",
                                    className: "text-white",
                                    href: maybeDeeplink
                                  })
                            ],
                            className: "flex flex-col gap-3 items-center justify-around"
                          });
              } else {
                return JsxRuntime.jsx(React$1.Form, {
                            children: JsxRuntime.jsx("button", {
                                  children: "Link BrightID to Discord",
                                  className: "p-3 bg-transparent border-2 border-brightid font-semibold rounded-3xl text-xl text-white",
                                  type: "submit"
                                }),
                            method: "get",
                            action: "/"
                          });
              }
          case /* NotVerified */2 :
              return JsxRuntime.jsx("a", {
                          children: JsxRuntime.jsx("button", {
                                children: "Attend a Verification Party to get Verified",
                                className: "p-3 bg-transparent border-2 border-brightid font-semibold rounded-3xl text-xl text-white"
                              }),
                          className: "text-2xl",
                          href: "https://meet.brightid.org/#/",
                          target: "_blank"
                        });
          case /* NotSponsored */3 :
              return JsxRuntime.jsx("a", {
                          children: JsxRuntime.jsx("button", {
                                children: "Get Sponsored by a BrightID App",
                                className: "p-3 bg-transparent border-2 border-brightid font-semibold rounded-3xl text-xl text-white"
                              }),
                          className: "text-2xl",
                          href: "https://apps.brightid.org/",
                          target: "_blank"
                        });
          case /* Unknown */0 :
          case /* Unique */4 :
              return JsxRuntime.jsx(JsxRuntime.Fragment, {});
          
        }
    case "normalLoad" :
        return JsxRuntime.jsx(JsxRuntime.Fragment, {});
    default:
      return JsxRuntime.jsx(JsxRuntime.Fragment, {});
  }
}

var BrightIdVerificationActions = {
  make: Root_Index$BrightIdVerificationActions
};

async function loader(param) {
  var maybeUser;
  var exit = 0;
  var maybeUser$1;
  try {
    maybeUser$1 = await AuthServer.authenticator.isAuthenticated(param.request);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "JsError") {
      maybeUser = undefined;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    maybeUser = (maybeUser$1 == null) ? undefined : Caml_option.some(maybeUser$1);
  }
  var maybeDiscordId = maybeUser !== undefined ? Caml_option.valFromOption(maybeUser).profile.id : undefined;
  if (maybeDiscordId === undefined) {
    return {
            maybeUser: maybeUser,
            maybeDeeplink: undefined
          };
  }
  var contextId = Uuid.v5(maybeDiscordId, process.env.UUID_NAMESPACE);
  var deepLink = Brightid_sdk.generateDeeplink(Constants$Shared.context, contextId, undefined);
  return {
          maybeUser: maybeUser,
          maybeDeeplink: deepLink
        };
}

function Root_Index$default(props) {
  var context = React$1.useOutletContext();
  var fetcher = React$1.useFetcher();
  var match = React$1.useLoaderData();
  var maybeUser = match.maybeUser;
  var match$1 = useWindowDimensions(undefined);
  var width = match$1.width;
  React.useEffect((function () {
          if (fetcher.type === "init") {
            fetcher.load("/Root_FetchBrightIDDiscord");
          }
          
        }), [fetcher]);
  var discordLogoutButton = maybeUser !== undefined ? JsxRuntime.jsx(DiscordLogoutButton.make, {
          label: "Log out of Discord"
        }) : JsxRuntime.jsx(JsxRuntime.Fragment, {});
  var match$2 = fetcher.type;
  var unusedSponsorships;
  switch (match$2) {
    case "done" :
        var data = fetcher.data;
        unusedSponsorships = (data == null) ? JsxRuntime.jsx("p", {
                children: "N/A",
                className: "text-white"
              }) : JsxRuntime.jsx("p", {
                children: String(data.unusedSponsorships),
                className: "text-3xl lg:text-5xl font-semibold text-brightBlue"
              });
        break;
    case "normalLoad" :
        unusedSponsorships = JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    className: "h-12 bg-gray-300 w-16 rounded-md "
                  }),
              className: " animate-pulse py-2 "
            });
        break;
    default:
      unusedSponsorships = JsxRuntime.jsx("div", {
            children: JsxRuntime.jsx("div", {
                  className: "h-12 bg-gray-300 w-16 rounded-md "
                }),
            className: " animate-pulse py-2"
          });
  }
  var match$3 = fetcher.type;
  var verificationCount;
  switch (match$3) {
    case "done" :
        var data$1 = fetcher.data;
        verificationCount = (data$1 == null) ? JsxRuntime.jsx("p", {
                children: "N/A",
                className: "text-white"
              }) : JsxRuntime.jsx("p", {
                children: String(data$1.verificationCount),
                className: "text-3xl lg:text-5xl font-semibold text-brightOrange"
              });
        break;
    case "normalLoad" :
        verificationCount = JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    className: "h-12 bg-gray-300 w-16 rounded-md "
                  }),
              className: " animate-pulse py-2 "
            });
        break;
    default:
      verificationCount = JsxRuntime.jsx("div", {
            children: JsxRuntime.jsx("div", {
                  className: "h-12 bg-gray-300 w-16 rounded-md "
                }),
            className: " animate-pulse py-2 "
          });
  }
  var match$4 = fetcher.type;
  var usedSponsorships;
  switch (match$4) {
    case "done" :
        var data$2 = fetcher.data;
        usedSponsorships = (data$2 == null) ? JsxRuntime.jsx("p", {
                children: "N/A",
                className: "text-white"
              }) : JsxRuntime.jsx("p", {
                children: String(data$2.assignedSponsorships - data$2.unusedSponsorships | 0),
                className: "text-3xl lg:text-5xl font-semibold  text-brightGreen"
              });
        break;
    case "normalLoad" :
        usedSponsorships = JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    className: "h-12 bg-gray-300 w-16 rounded-md "
                  }),
              className: " animate-pulse  py-2"
            });
        break;
    default:
      usedSponsorships = JsxRuntime.jsx("div", {
            children: JsxRuntime.jsx("div", {
                  className: "h-12 bg-gray-300 w-16 rounded-md "
                }),
            className: " animate-pulse  py-2"
          });
  }
  return JsxRuntime.jsxs("div", {
              children: [
                width < 768 ? JsxRuntime.jsx("section", {
                        children: JsxRuntime.jsx(Root_Index$BrightIdToolTip, {
                              fetcher: fetcher,
                              maybeUser: maybeUser
                            }),
                        className: "flex justify-center items-center flex-col w-full gap-4 relative"
                      }) : JsxRuntime.jsx(JsxRuntime.Fragment, {}),
                JsxRuntime.jsxs("header", {
                      children: [
                        JsxRuntime.jsx(SidebarToggle.make, {
                              handleIsSidebarVisible: context.handleIsSidebarVisible,
                              maybeUser: maybeUser
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: discordLogoutButton
                                    }),
                                Core__Option.isSome(maybeUser) ? JsxRuntime.jsx(Rainbowkit.ConnectButton, {
                                        className: "h-full"
                                      }) : JsxRuntime.jsx(InviteButton.make, {})
                              ],
                              className: "flex flex-col-reverse md:flex-row items-center justify-center gap-4 "
                            })
                      ],
                      className: "flex flex-row justify-between md:justify-end m-5"
                    }),
                width > 768 ? JsxRuntime.jsx("section", {
                        children: JsxRuntime.jsx(Root_Index$BrightIdToolTip, {
                              fetcher: fetcher,
                              maybeUser: maybeUser
                            }),
                        className: "flex justify-center items-center flex-col w-full gap-4 relative"
                      }) : JsxRuntime.jsx(JsxRuntime.Fragment, {}),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx("p", {
                                                    children: "BrightID  ",
                                                    className: "relative pr-2 text-xl md:text-2xl lg:text-3xl text-white font-poppins font-bold"
                                                  }),
                                              JsxRuntime.jsx("div", {
                                                    className: "h-0 border border-[#FFFFFF] bg-white flex-1"
                                                  })
                                            ],
                                            className: "flex items-center"
                                          }),
                                      JsxRuntime.jsx("p", {
                                            children: "DISCORD BOT  ",
                                            className: "relative py-3 text-2xl sm:3xl md:text-4xl lg:text-5xl xl:text-6xl font-pressStart font-extrabold text-white tracking-tight"
                                          }),
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx("div", {
                                                    className: "h-0 border border-[#FFFFFF] bg-white flex-1"
                                                  }),
                                              JsxRuntime.jsx("p", {
                                                    children: "Command Center",
                                                    className: "relative text-white text-xl md:text-2xl lg:text-3xl font-poppins font-bold pl-2"
                                                  })
                                            ],
                                            className: "flex items-center"
                                          })
                                    ],
                                    className: "pt-2 "
                                  }),
                              JsxRuntime.jsxs("section", {
                                    children: [
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx("img", {
                                                    className: "pb-4",
                                                    src: "/assets/gift_icon.svg"
                                                  }),
                                              unusedSponsorships,
                                              JsxRuntime.jsx("p", {
                                                    children: "Available Sponsorships",
                                                    className: "text-white font-poppins text-xs font-semibold p-1"
                                                  })
                                            ],
                                            className: "lg:min-w-[237px] relative flex flex-col border border-brightBlue rounded-xl justify-center items-start bg-extraDark p-6 lg:p-12 self-stretch"
                                          }),
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx("img", {
                                                    className: "pb-4",
                                                    src: "/assets/verified_icon.svg"
                                                  }),
                                              verificationCount,
                                              JsxRuntime.jsx("p", {
                                                    children: "Verifications",
                                                    className: " text-white font-poppins text-xs font-semibold p-1"
                                                  })
                                            ],
                                            className: "lg:min-w-[237px] relative flex flex-col border border-brightOrange rounded-xl justify-center items-start  bg-extraDark p-6 lg:p-12 self-stretch"
                                          }),
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx("img", {
                                                    className: "pb-4",
                                                    src: "/assets/unlock_icon.svg"
                                                  }),
                                              usedSponsorships,
                                              JsxRuntime.jsx("p", {
                                                    children: "Used Sponsorships",
                                                    className: " text-white font-poppins text-xs font-semibold p-1"
                                                  }),
                                              JsxRuntime.jsx("div", {
                                                    className: "text-2xl font-semibold text-transparent bg-clip-text bg-gradient-to-l from-brightid to-white"
                                                  })
                                            ],
                                            className: "lg:min-w-[237px]  relative flex flex-col border border-brightGreen rounded-xl justify-center items-start bg-extraDark p-6 lg:p-12 self-stretch"
                                          })
                                    ],
                                    className: "py-4 gap-5 lg:gap-0 lg:w-full max-w-5xl flex flex-col lg:flex-row  justify-around items-center"
                                  }),
                              JsxRuntime.jsx("section", {
                                    children: JsxRuntime.jsx(Root_Index$BrightIdVerificationActions, {
                                          fetcher: fetcher,
                                          maybeUser: maybeUser,
                                          maybeDeeplink: match.maybeDeeplink
                                        }),
                                    className: "flex flex-col justify-center items-center pb-2 gap-8"
                                  })
                            ],
                            className: "flex flex-1 flex-col justify-around items-center h-full"
                          }),
                      className: "flex flex-1 w-full justify-center "
                    })
              ],
              className: "flex flex-col flex-1"
            });
}

var $$default = Root_Index$default;

export {
  QRCodeSvg ,
  StatusToolTip ,
  getWindowDimensions ,
  useWindowDimensions ,
  BrightIdToolTip ,
  BrightIdVerificationActions ,
  loader ,
  $$default ,
  $$default as default,
}
/* uuid Not a pure module */
