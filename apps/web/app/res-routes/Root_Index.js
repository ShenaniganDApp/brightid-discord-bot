// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Remix from "remix";
import * as Js_dict from "../../../../node_modules/rescript/lib/es6/js_dict.js";
import * as Js_json from "../../../../node_modules/rescript/lib/es6/js_json.js";
import * as AuthServer from "../AuthServer.js";
import * as Belt_Option from "../../../../node_modules/rescript/lib/es6/belt_Option.js";
import * as InviteButton from "../components/InviteButton.js";
import * as DiscordButton from "../components/DiscordButton.js";
import * as SidebarToggle from "../components/SidebarToggle.js";
import * as Webapi__Fetch from "../../../../node_modules/rescript-webapi/src/Webapi/Webapi__Fetch.js";
import * as Js_null_undefined from "../../../../node_modules/rescript/lib/es6/js_null_undefined.js";

var Canvas = {};

var QRCode = {};

var brightIdVerificationEndpoint = "https://app.brightid.org/node/v5/verifications/Discord";

function loader(param) {
  return AuthServer.authenticator.isAuthenticated(param.request).then(function (user) {
              var init = Webapi__Fetch.RequestInit.make(/* Get */0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
              return fetch(new Request(brightIdVerificationEndpoint, init)).then(function (res) {
                            return res.json();
                          }).then(function (json) {
                          var data = Belt_Option.getExn(Js_dict.get(Js_json.decodeObject(json), "data"));
                          var verificationCount = Js_null_undefined.fromOption(Belt_Option.flatMap(Js_dict.get(Js_json.decodeObject(data), "count"), Js_json.decodeNumber));
                          return Promise.resolve({
                                      user: user,
                                      verificationCount: verificationCount
                                    });
                        });
            });
}

function Root_Index$default(Props) {
  var context = Remix.useOutletContext();
  var match = Remix.useLoaderData();
  var verificationCount = match.verificationCount;
  var verificationCount$1 = (verificationCount == null) ? "N/A" : String(verificationCount);
  var linkBrightId = (match.user == null) ? React.createElement(DiscordButton.make, {
          label: "Login to Discord"
        }) : React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "flex flex-row w-full justify-center gap-2"
            }, React.createElement("p", {
                  className: "text-2xl md:text-3xl font-semibold text-white"
                }, "Link  "), React.createElement("p", {
                  className: " text-2xl md:text-3xl font-semibold text-brightid stroke-black stroke-1"
                }, "BrightID "), React.createElement("p", {
                  className: "text-2xl md:text-3xl font-semibold text-white"
                }, " to Discord")), React.createElement("div", {
              className: "px-8 py-4 bg-white border-brightid border-4 text-dark text-2xl font-semibold rounded-xl shadow-lg"
            }, "Link to Discord"));
  return React.createElement("div", {
              className: "flex flex-col flex-1"
            }, React.createElement("header", {
                  className: "flex flex-row justify-between md:justify-end m-4"
                }, React.createElement(SidebarToggle.make, {
                      handleToggleSidebar: context.handleToggleSidebar
                    }), React.createElement(InviteButton.make, {})), React.createElement("div", {
                  className: "flex flex-1 w-full justify-center "
                }, React.createElement("div", {
                      className: "flex flex-1 flex-col  justify-around items-center text-center"
                    }, React.createElement("span", {
                          className: "text-4xl md:text-8xl font-poppins font-extrabold text-transparent bg-[size:1000px_100%] bg-clip-text bg-gradient-to-l from-brightid to-white animate-text-scroll"
                        }, "BrightID Discord Bot"), React.createElement("section", {
                          className: "width-full flex flex-col md:flex-row justify-around items-center w-full"
                        }, React.createElement("div", {
                              className: "flex flex-col  rounded-xl justify-around items-center text-center h-32 w-60 md:h-48 m-2"
                            }, React.createElement("div", {
                                  className: "text-3xl font-bold text-white"
                                }, "Verifications"), React.createElement("div", {
                                  className: "text-3xl font-semibold text-transparent bg-clip-text bg-gradient-to-l from-brightid to-white"
                                }, verificationCount$1)), React.createElement("div", {
                              className: "flex flex-col rounded-xl justify-around items-center text-center h-32 w-60 md:h-48 m-2"
                            }, React.createElement("div", {
                                  className: "text-3xl font-bold text-white"
                                }, "Sponsorships"), React.createElement("div", {
                                  className: "text-3xl font-semibold text-transparent bg-clip-text bg-gradient-to-l from-brightid to-white"
                                }, "0"))), React.createElement("section", {
                          className: "flex justify-center items-center flex-col w-full gap-4"
                        }, linkBrightId))));
}

var $$default = Root_Index$default;

export {
  Canvas ,
  QRCode ,
  brightIdVerificationEndpoint ,
  loader ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
