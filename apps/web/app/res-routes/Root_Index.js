// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Remix from "remix";
import * as InviteButton from "../components/InviteButton.js";
import * as DiscordButton from "../components/DiscordButton.js";
import * as SidebarToggle from "../components/SidebarToggle.js";

var Canvas = {};

var QRCode = {};

function Root_Index$default(Props) {
  var context = Remix.useOutletContext();
  var fetcher = Remix.useFetcher();
  React.useEffect((function () {
          if (fetcher.type === "init") {
            fetcher.load("/Root_FetchBrightIDDiscord");
          }
          
        }), [fetcher]);
  var match = fetcher.type;
  var verificationCount;
  switch (match) {
    case "done" :
        var data = fetcher.data;
        verificationCount = (data == null) ? React.createElement("p", {
                className: "text-white"
              }, "N/A") : React.createElement("p", {
                className: "text-3xl font-semibold text-transparent bg-clip-text bg-gradient-to-l from-brightid to-white"
              }, String(data.verificationCount));
        break;
    case "normalLoad" :
        verificationCount = React.createElement("div", {
              className: " animate-pulse  "
            }, React.createElement("div", {
                  className: "h-8 bg-gray-300 w-8 rounded-md "
                }));
        break;
    default:
      verificationCount = React.createElement("div", {
            className: " animate-pulse  "
          }, React.createElement("div", {
                className: "h-8 bg-gray-300 w-8 rounded-md "
              }));
  }
  var match$1 = fetcher.type;
  var linkBrightId;
  switch (match$1) {
    case "done" :
        var data$1 = fetcher.data;
        if (data$1 == null) {
          linkBrightId = React.createElement(DiscordButton.make, {
                label: "Login to Discord"
              });
        } else {
          var match$2 = data$1.user;
          if (match$2 == null) {
            linkBrightId = React.createElement(DiscordButton.make, {
                  label: "Login to Discord"
                });
          } else {
            var match$3 = data$1.verifyStatus;
            switch (match$3) {
              case /* Unknown */0 :
                  linkBrightId = React.createElement("p", {
                        className: "text-2xl md:text-3xl font-semibold text-white"
                      }, "Something went wrong checking your BrightId status");
                  break;
              case /* NotLinked */1 :
                  linkBrightId = React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "flex flex-row w-full justify-center gap-2"
                          }, React.createElement("p", {
                                className: "text-2xl md:text-3xl font-semibold text-white"
                              }, "Link  "), React.createElement("p", {
                                className: " text-2xl md:text-3xl font-semibold text-brightid stroke-black stroke-1"
                              }, "BrightID "), React.createElement("p", {
                                className: "text-2xl md:text-3xl font-semibold text-white"
                              }, " to Discord")), React.createElement("div", {
                            className: "px-8 py-4 bg-white border-brightid border-4 text-dark text-2xl font-semibold rounded-xl shadow-lg"
                          }, "Link to Discord"));
                  break;
              case /* NotVerified */2 :
                  linkBrightId = React.createElement("p", {
                        className: "text-2xl md:text-3xl font-semibold text-white"
                      }, "You are not Verified");
                  break;
              case /* NotSponsored */3 :
                  linkBrightId = React.createElement("p", {
                        className: "text-2xl md:text-3xl font-semibold text-white"
                      }, "You are not Sponsored");
                  break;
              case /* Unique */4 :
                  linkBrightId = React.createElement("p", {
                        className: "text-2xl md:text-3xl font-semibold text-white"
                      }, "Congrats on being Verified with BrightID");
                  break;
              
            }
          }
        }
        break;
    case "normalLoad" :
        linkBrightId = React.createElement("div", {
              className: " animate-pulse  "
            }, React.createElement("div", {
                  className: "h-24 bg-gray-300 w-52 rounded-md "
                }));
        break;
    default:
      linkBrightId = React.createElement("div", {
            className: " animate-pulse  "
          }, React.createElement("div", {
                className: "h-24 bg-gray-300 w-52 rounded-md "
              }));
  }
  return React.createElement("div", {
              className: "flex flex-col flex-1"
            }, React.createElement("header", {
                  className: "flex flex-row justify-between md:justify-end m-4"
                }, React.createElement(SidebarToggle.make, {
                      handleToggleSidebar: context.handleToggleSidebar
                    }), React.createElement(InviteButton.make, {})), React.createElement("div", {
                  className: "flex flex-1 w-full justify-center "
                }, React.createElement("div", {
                      className: "flex flex-1 flex-col  justify-around items-center text-center"
                    }, React.createElement("span", {
                          className: "text-4xl md:text-8xl font-poppins font-extrabold text-transparent bg-[size:1000px_100%] bg-clip-text bg-gradient-to-l from-brightid to-white animate-text-scroll"
                        }, "BrightID Discord Bot"), React.createElement("section", {
                          className: "width-full flex flex-col md:flex-row justify-around items-center w-full"
                        }, React.createElement("div", {
                              className: "flex flex-col  rounded-xl justify-around items-center text-center h-32 w-60 md:h-48 m-2"
                            }, React.createElement("div", {
                                  className: "text-3xl font-bold text-white"
                                }, "Verifications"), verificationCount), React.createElement("div", {
                              className: "flex flex-col rounded-xl justify-around items-center text-center h-32 w-60 md:h-48 m-2"
                            }, React.createElement("div", {
                                  className: "text-3xl font-bold text-white"
                                }, "Sponsorships"), React.createElement("div", {
                                  className: "text-3xl font-semibold text-transparent bg-clip-text bg-gradient-to-l from-brightid to-white"
                                }, "0"))), React.createElement("section", {
                          className: "flex justify-center items-center flex-col w-full gap-4"
                        }, linkBrightId))));
}

var $$default = Root_Index$default;

export {
  Canvas ,
  QRCode ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
