// Generated by ReScript, PLEASE EDIT WITH CARE

import XRay from "x-ray";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Env$Utils from "./Env.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import NodeFetch from "node-fetch";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.mjs";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.mjs";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

globalThis.fetch = NodeFetch;

var NodeFetchPolyfill = {};

var PatchError = /* @__PURE__ */Caml_exceptions.create("Gist-Utils.Response.PatchError");

var $$Response = {
  PatchError: PatchError
};

Env$Utils.createEnv();

var envConfig = Env$Utils.getConfig();

var envConfig$1;

if (envConfig.TAG === "Ok") {
  envConfig$1 = envConfig._0;
} else {
  throw {
        RE_EXN_ID: Env$Utils.EnvError,
        _1: envConfig._0,
        Error: new Error()
      };
}

var githubAccessToken = envConfig$1.githubAccessToken;

var GithubGist = {};

function content(field) {
  return {
          content: field.required("content", Json_Decode$JsonCombinators.string)
        };
}

function files(field) {
  return {
          files: (function (__x) {
                return field.required("files", __x);
              })(Json_Decode$JsonCombinators.dict(Json_Decode$JsonCombinators.object(content)))
        };
}

var gist = Json_Decode$JsonCombinators.object(files);

var Decode = {
  content: content,
  files: files,
  gist: gist
};

function makeGistConfig(id, name, token) {
  return {
          id: id,
          name: name,
          token: token
        };
}

var XRayError = /* @__PURE__ */Caml_exceptions.create("Gist-Utils.XRay.XRayError");

var XRay$1 = {
  XRayError: XRayError
};

async function scrapeGistRawUrl(url) {
  var x = XRay();
  return x(url, "div.file-actions", [{
                href: "a @href"
              }]);
}

function content$1(config, decoder) {
  var token = config.token;
  var name = config.name;
  var id = config.id;
  return scrapeGistRawUrl("https://gist.github.com/" + id).then(function (items) {
                return Promise.resolve(Belt_Array.get(items, 0));
              }).then(function (maybeRawButton) {
              var href;
              if (maybeRawButton !== undefined) {
                href = Belt_Option.getWithDefault(maybeRawButton.href, "https://gist.githubusercontent.com/raw/" + id + "/" + name);
              } else {
                throw {
                      RE_EXN_ID: XRayError,
                      _1: "Raw Button Scrape Failed",
                      Error: new Error()
                    };
              }
              var params = {
                Authorization: "Bearer " + token,
                Accept: "application/vnd.github+json",
                "X-GitHub-Api-Version": "2022-11-28"
              };
              return globalThis.fetch(href, params).then(function (res) {
                            return res.json();
                          }).then(function (data) {
                          var content = Json$JsonCombinators.decode(data, decoder);
                          if (content.TAG === "Ok") {
                            return Promise.resolve(content._0);
                          }
                          throw {
                                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                                _1: content._0,
                                Error: new Error()
                              };
                        });
            });
}

var ReadGist = {
  content: content$1
};

var UpdateGistError = /* @__PURE__ */Caml_exceptions.create("Gist-Utils.UpdateGist.UpdateGistError");

var DuplicateKey = /* @__PURE__ */Caml_exceptions.create("Gist-Utils.UpdateGist.DuplicateKey");

function updateEntry(content, key, entry, config) {
  var id = config.id;
  content[key] = entry;
  var content$1 = JSON.stringify(content);
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Update gist entry with key: " + key,
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token,
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return Core__Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id, params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve();
                        });
                    return Promise.resolve({
                                TAG: "Error",
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: "Ok",
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: "Error",
                            _0: e
                          });
              }));
}

function removeEntry(content, key, config) {
  var id = config.id;
  var entries = Belt_Array.keep(Js_dict.entries(content), (function (param) {
          return key !== param[0];
        }));
  var content$1 = JSON.stringify(Js_dict.fromArray(entries));
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Remove entry with id : " + key,
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token,
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return Core__Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id, params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve();
                        });
                    return Promise.resolve({
                                TAG: "Error",
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: "Ok",
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: "Error",
                            _0: e
                          });
              }));
}

function removeManyEntries(content, keys, config) {
  var NoKeysMatch = /* @__PURE__ */Caml_exceptions.create("NoKeysMatch");
  var id = config.id;
  var entries = Belt_Array.keep(Js_dict.entries(content), (function (param) {
          return !Belt_SetString.has(keys, param[0]);
        }));
  var match = entries.length;
  if (match === 0) {
    return Promise.resolve({
                TAG: "Error",
                _0: {
                  RE_EXN_ID: UpdateGistError,
                  _1: {
                    RE_EXN_ID: NoKeysMatch
                  }
                }
              });
  }
  var content$1 = JSON.stringify(Js_dict.fromArray(entries));
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var size = Belt_SetString.size(keys).toString();
  var body = {
    gist_id: id,
    description: "Removed  " + size + " entries",
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token,
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return Core__Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id, params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve();
                        });
                    return Promise.resolve({
                                TAG: "Error",
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: "Ok",
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: "Error",
                            _0: e
                          });
              }));
}

function updateAllEntries(content, entries, config) {
  var id = config.id;
  var entries$1 = Js_dict.fromList(entries);
  var keys = Object.keys(entries$1);
  Belt_Array.forEach(keys, (function (key) {
          var entry = Belt_Option.getExn(Js_dict.get(entries$1, key));
          content[key] = entry;
        }));
  var content$1 = JSON.stringify(content);
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Update gist",
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token,
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return Core__Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id, params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve();
                        });
                    return Promise.resolve({
                                TAG: "Error",
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: "Ok",
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: "Error",
                            _0: e
                          });
              }));
}

function addEntry(content, key, entry, config) {
  var id = config.id;
  var match = Js_dict.get(content, key);
  if (match !== undefined) {
    return Promise.resolve({
                TAG: "Error",
                _0: {
                  RE_EXN_ID: DuplicateKey,
                  _1: key
                }
              });
  }
  content[key] = entry;
  var content$1 = JSON.stringify(content);
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Add gist entry with key: " + key,
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token,
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return Core__Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id, params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve();
                        });
                    return Promise.resolve({
                                TAG: "Error",
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: "Ok",
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: "Error",
                            _0: e
                          });
              }));
}

var UpdateGist = {
  UpdateGistError: UpdateGistError,
  DuplicateKey: DuplicateKey,
  updateEntry: updateEntry,
  removeEntry: removeEntry,
  removeManyEntries: removeManyEntries,
  updateAllEntries: updateAllEntries,
  addEntry: addEntry
};

export {
  NodeFetchPolyfill ,
  $$Response ,
  envConfig$1 as envConfig,
  githubAccessToken ,
  GithubGist ,
  Decode ,
  makeGistConfig ,
  XRay$1 as XRay,
  scrapeGistRawUrl ,
  ReadGist ,
  UpdateGist ,
}
/*  Not a pure module */
