// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Env$Utils from "./Env.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import NodeFetch from "node-fetch";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.mjs";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

globalThis.fetch = NodeFetch;

var NodeFetchPolyfill = {};

var PatchError = /* @__PURE__ */Caml_exceptions.create("Gist-Utils.Response.PatchError");

var $$Response = {
  PatchError: PatchError
};

Env$Utils.createEnv(undefined);

var envConfig = Env$Utils.getConfig(undefined);

var envConfig$1;

if (envConfig.TAG === /* Ok */0) {
  envConfig$1 = envConfig._0;
} else {
  throw {
        RE_EXN_ID: Env$Utils.EnvError,
        _1: envConfig._0,
        Error: new Error()
      };
}

var githubAccessToken = envConfig$1.githubAccessToken;

var GithubGist = {};

function content(field) {
  return {
          content: field.required("content", Json_Decode$JsonCombinators.string)
        };
}

function files(field) {
  var __x = Json_Decode$JsonCombinators.dict(Json_Decode$JsonCombinators.object(content));
  return {
          files: field.required("files", __x)
        };
}

var gist = Json_Decode$JsonCombinators.object(files);

var Decode = {
  content: content,
  files: files,
  gist: gist
};

function makeGistConfig(id, name, token) {
  return {
          id: id,
          name: name,
          token: token
        };
}

function content$1(config, decoder) {
  var name = config.name;
  var params = {
    Authorization: "Bearer " + config.token + ""
  };
  return globalThis.fetch("https://api.github.com/gists/" + config.id + "", params).then(function (res) {
                return res.json();
              }).then(function (data) {
              var gist$1 = Json$JsonCombinators.decode(data, gist);
              if (gist$1.TAG !== /* Ok */0) {
                return Promise.reject({
                            RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                            _1: gist$1._0
                          });
              }
              var json = Belt_Option.getExn(Js_dict.get(gist$1._0.files, name));
              var content = Json$JsonCombinators.decode(Json$JsonCombinators.parseExn(json.content), decoder);
              if (content.TAG === /* Ok */0) {
                return Promise.resolve(content._0);
              }
              throw {
                    RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                    _1: content._0,
                    Error: new Error()
                  };
            });
}

var ReadGist = {
  content: content$1
};

var UpdateGistError = /* @__PURE__ */Caml_exceptions.create("Gist-Utils.UpdateGist.UpdateGistError");

function updateEntry(content, key, entry, config) {
  var id = config.id;
  var prev = Belt_Option.getExn(Js_dict.get(content, key));
  var $$new = Object.assign(prev, entry);
  content[key] = $$new;
  var content$1 = JSON.stringify(content);
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Update gist entry with key: " + key + "",
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token + "",
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return $$Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id + "", params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve(undefined);
                        });
                    return Promise.resolve({
                                TAG: /* Error */1,
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: /* Ok */0,
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: e
                          });
              }));
}

function removeEntry(content, key, config) {
  var id = config.id;
  var entries = Belt_Array.keep(Js_dict.entries(content), (function (param) {
          return key !== param[0];
        }));
  var content$1 = JSON.stringify(Js_dict.fromArray(entries));
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Remove entry with id : " + key + "",
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token + "",
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return $$Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id + "", params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve(undefined);
                        });
                    return Promise.resolve({
                                TAG: /* Error */1,
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: /* Ok */0,
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: e
                          });
              }));
}

function updateAllEntries(content, entries, config) {
  var id = config.id;
  var entries$1 = Js_dict.fromList(entries);
  var keys = Object.keys(entries$1);
  Belt_Array.forEach(keys, (function (key) {
          var prev = Belt_Option.getExn(Js_dict.get(content, key));
          var entry = Belt_Option.getExn(Js_dict.get(entries$1, key));
          var $$new = Object.assign(prev, entry);
          content[key] = $$new;
        }));
  var content$1 = JSON.stringify(content);
  var files = {};
  files[config.name] = {
    content: content$1
  };
  var body = {
    gist_id: id,
    description: "Update gist",
    files: files
  };
  var params = {
    method: "PATCH",
    headers: {
      Authorization: "token " + config.token + "",
      Accept: "application/vnd.github+json"
    },
    body: JSON.stringify(body)
  };
  return $$Promise.$$catch(globalThis.fetch("https://api.github.com/gists/" + id + "", params).then(function (res) {
                  var status = res.status;
                  if (status !== 200) {
                    res.json().then(function (json) {
                          console.log(status, JSON.stringify(json));
                          return Promise.resolve(undefined);
                        });
                    return Promise.resolve({
                                TAG: /* Error */1,
                                _0: {
                                  RE_EXN_ID: PatchError
                                }
                              });
                  } else {
                    return Promise.resolve({
                                TAG: /* Ok */0,
                                _0: 200
                              });
                  }
                }), (function (e) {
                console.log("e: ", e);
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: e
                          });
              }));
}

var UpdateGist = {
  UpdateGistError: UpdateGistError,
  updateEntry: updateEntry,
  removeEntry: removeEntry,
  updateAllEntries: updateAllEntries
};

export {
  NodeFetchPolyfill ,
  $$Response ,
  envConfig$1 as envConfig,
  githubAccessToken ,
  GithubGist ,
  Decode ,
  makeGistConfig ,
  ReadGist ,
  UpdateGist ,
}
/*  Not a pure module */
