// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "./Env.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Gist$Utils from "@brightidbot/utils/src/Gist.mjs";
import * as DiscordJs from "discord.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

Env.createEnv(undefined);

var envConfig = Env.getConfig(undefined);

var envConfig$1;

if (envConfig.TAG === /* Ok */0) {
  envConfig$1 = envConfig._0;
} else {
  throw {
        RE_EXN_ID: Env.EnvError,
        _1: envConfig._0,
        Error: new Error()
      };
}

var discordBotToken = envConfig$1.discordApiToken;

var githubAccessToken = envConfig$1.githubAccessToken;

var id = envConfig$1.gistId;

var options = {
  intents: [
    "GUILDS",
    "GUILD_MESSAGES"
  ]
};

var client = new DiscordJs.Client(options);

var guild = Json_Decode$JsonCombinators.object(function (field) {
      return {
              role: field.optional("role", Json_Decode$JsonCombinators.string),
              name: field.optional("name", Json_Decode$JsonCombinators.string),
              inviteLink: field.optional("inviteLink", Json_Decode$JsonCombinators.string),
              roleId: field.optional("roleId", Json_Decode$JsonCombinators.string)
            };
    });

var brightIdGuilds = Json_Decode$JsonCombinators.dict(guild);

client.login(discordBotToken).then(function (param) {
      var config = Gist$Utils.makeGistConfig(id, "guildData.json", githubAccessToken);
      return $$Promise.$$catch(Gist$Utils.ReadGist.content(config, brightIdGuilds).then(function (content) {
                      var guildIds = Object.keys(content);
                      var roleIdEntries = Belt_List.fromArray(Belt_Array.keepMap(Belt_Array.map(guildIds, (function (guildId) {
                                      var brightIdGuild = Belt_Option.getExn(Js_dict.get(content, guildId));
                                      var guildManager = client.guilds;
                                      var guilds = guildManager.cache;
                                      var guild = guilds.get(guildId);
                                      if (guild == null) {
                                        return ;
                                      }
                                      var guildRoleManager = guild.roles;
                                      var roles = guildRoleManager.cache;
                                      var brightIdRole = roles.find(function (r) {
                                            return r.name === Belt_Option.getWithDefault(brightIdGuild.role, "");
                                          });
                                      if (brightIdRole == null) {
                                        return ;
                                      }
                                      var roleId = brightIdRole.id;
                                      return [
                                              guildId,
                                              {
                                                roleId: roleId
                                              }
                                            ];
                                    })), (function (roleIdEntry) {
                                  if (Belt_Option.isSome(roleIdEntry)) {
                                    return Belt_Option.getExn(roleIdEntry);
                                  }
                                  
                                })));
                      return Gist$Utils.UpdateGist.updateAllEntries(content, roleIdEntries, config).then(function (result) {
                                  if (result.TAG === /* Ok */0) {
                                    return Promise.resolve((console.log("" + result._0 + ": Succesfully updated gist with id: " + id + ""), undefined));
                                  }
                                  throw {
                                        RE_EXN_ID: Gist$Utils.UpdateGist.UpdateGistError,
                                        _1: result._0,
                                        Error: new Error()
                                      };
                                });
                    }), (function (e) {
                    console.log("e: ", e);
                    return Promise.resolve(undefined);
                  }));
    });

export {
  envConfig$1 as envConfig,
  discordBotToken ,
  githubAccessToken ,
  id ,
  options ,
  client ,
  guild ,
  brightIdGuilds ,
}
/*  Not a pure module */
