// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "./Env.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DiscordJs from "discord.js";
import NodeFetch from "node-fetch";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";

globalThis.fetch = NodeFetch;

var NodeFetchPolyfill = {};

var $$Response = {};

Env.createEnv(undefined);

var envConfig = Env.getConfig(undefined);

var envConfig$1;

if (envConfig.TAG === /* Ok */0) {
  envConfig$1 = envConfig._0;
} else {
  throw {
        RE_EXN_ID: Env.EnvError,
        _1: envConfig._0,
        Error: new Error()
      };
}

var githubAccessToken = envConfig$1.githubAccessToken;

var gistId = envConfig$1.gistId;

var options = {
  intents: [
    "GUILDS",
    "GUILD_MESSAGES"
  ]
};

var client = new DiscordJs.Client(options);

function make(param) {
  var params = {
    Authorization: "Bearer " + githubAccessToken
  };
  return globalThis.fetch("https://api.github.com/gists/" + gistId, params).then(function (res) {
                return res.json();
              }).then(function (data) {
              var files = Belt_Option.getExn(Js_dict.get(Belt_Option.getExn(Js_json.decodeObject(data)), "files"));
              var guildData = Belt_Option.getExn(Js_dict.get(Belt_Option.getExn(Js_json.decodeObject(files)), "guildData.json"));
              return Promise.resolve(Belt_Option.getExn(Js_json.decodeObject(JSON.parse(Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(Belt_Option.getExn(Js_json.decodeObject(guildData)), "content"))))))));
            });
}

var ReadGist = {
  make: make
};

client.login(envConfig$1.discordApiToken).then(function (param) {
      var guildManager = client.guilds;
      return $$Promise.$$catch(make(undefined).then(function (guildData) {
                      var guildIds = Object.keys(guildData);
                      console.log("guildIds: ", guildIds);
                      var roles = Belt_Array.map(guildIds, (function (guildId) {
                              var roleName = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(Belt_Option.getExn(Js_json.decodeObject(Belt_Option.getExn(Js_dict.get(guildData, guildId)))), "role"))));
                              var guilds = guildManager.cache;
                              var guild = Belt_Option.getExn(Caml_option.nullable_to_opt(guilds.get(guildId)));
                              var guildRoleManager = guild.roles;
                              var roles = guildRoleManager.cache;
                              return Belt_Option.getExn(Caml_option.nullable_to_opt(roles.find(function (r) {
                                                  return r.name === roleName;
                                                })));
                            }));
                      var newGist = {};
                      Belt_Array.forEach(roles, (function (role) {
                              var roleGuildId = role.guild.id;
                              var brightIdGuild = Belt_Option.getExn(Js_json.decodeObject(Belt_Option.getExn(Js_dict.get(guildData, roleGuildId))));
                              var brightIdGuildWithRoleId = {
                                name: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(brightIdGuild, "name"), Js_json.decodeString)),
                                role: Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(brightIdGuild, "role"), Js_json.decodeString)),
                                roleId: role.id,
                                inviteLink: Js_null_undefined.fromOption(Belt_Option.flatMap(Js_dict.get(brightIdGuild, "inviteLink"), Js_json.decodeString))
                              };
                              newGist[roleGuildId] = brightIdGuildWithRoleId;
                              
                            }));
                      return Promise.resolve(undefined);
                    }), (function (e) {
                    console.log(e);
                    return Promise.resolve(undefined);
                  }));
    });

export {
  NodeFetchPolyfill ,
  $$Response ,
  envConfig$1 as envConfig,
  githubAccessToken ,
  gistId ,
  options ,
  client ,
  ReadGist ,
  
}
/*  Not a pure module */
