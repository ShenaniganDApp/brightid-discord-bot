// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Env = require("./Env.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Dotenv = require("dotenv");
var Discord_User = require("./Discord/Discord_User.bs.js");
var Discord_Guild = require("./Discord/Discord_Guild.bs.js");
var Discord_Client = require("./Discord/Discord_Client.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Discord_Message = require("./Discord/Discord_Message.bs.js");
var Discord_RoleManager = require("./Discord/Discord_RoleManager.bs.js");
var Parser_DetectHandler = require("./parser/Parser_DetectHandler.bs.js");
var UpdateOrReadGistJs = require("./updateOrReadGist.js");
var WhitelistedChannels = require("./parser/whitelistedChannels");

var RequestHandlerError = /* @__PURE__ */Caml_exceptions.create("Bot.RequestHandlerError");

function parseWhitelistedChannels(prim) {
  return WhitelistedChannels();
}

function updateGist(prim0, prim1) {
  UpdateOrReadGistJs.updateGist(prim0, prim1);
  
}

Dotenv.config();

var config = Env.getConfig(undefined);

var client = Discord_Client.make(undefined);

Discord_Client.validateClient(client).on("ready", (function (param) {
        console.log("Logged In");
        
      }));

function updateGistOnGuildCreate(guild) {
  UpdateOrReadGistJs.updateGist(guild.id, {
        name: guild.name,
        role: "Verified"
      });
  
}

function onGuildCreate(guild) {
  var roleManager = guild.roles;
  Discord_RoleManager.makeGuildRole(roleManager, {
        data: {
          name: /* RoleName */{
            _0: "Verified"
          },
          color: /* String */{
            _0: "ORANGE"
          }
        },
        reason: /* Reason */{
          _0: "Verify users with BrightID"
        }
      });
  return updateGistOnGuildCreate(guild);
}

Discord_Client.validateClient(client).on("guildCreate", (function (guild) {
        return onGuildCreate(Discord_Guild.make(guild));
      }));

function tap(args) {
  console.log(args);
  return args;
}

function checkWhitelistedChannel(message) {
  var whitelistedChannels = WhitelistedChannels();
  var messageWhitelisted = whitelistedChannels.reduce((function (whitelisted, channel) {
          if (/* ChannelName */({
                _0: channel
              }) === message.channel.name || channel === "*") {
            return true;
          } else {
            return whitelisted;
          }
        }), false);
  if (messageWhitelisted) {
    return false;
  } else {
    return whitelistedChannels.length !== 0;
  }
}

function onMessage(message) {
  var isBot = Discord_User.validateBot(message.author.bot);
  if (isBot) {
    return ;
  }
  if (checkWhitelistedChannel(message)) {
    return ;
  }
  var validClient = Discord_Client.validateClient(client);
  var handler = Parser_DetectHandler.detectHandler(message.content);
  if (handler !== undefined) {
    return Curry._3(handler, message.member, validClient, message.t);
  } else {
    Discord_Message.reply(message.t, /* Content */{
          _0: "Could not find the requested command"
        });
    console.error({
          RE_EXN_ID: RequestHandlerError,
          date: Date.now(),
          message: "Could not find the requested command"
        });
    return ;
  }
}

Discord_Client.validateClient(client).on("message", (function (message) {
        return onMessage(Discord_Message.make(message));
      }));

if (config.TAG === /* Ok */0) {
  Discord_Client.login(client, config._0);
} else {
  console.log(config._0);
}

exports.RequestHandlerError = RequestHandlerError;
exports.parseWhitelistedChannels = parseWhitelistedChannels;
exports.updateGist = updateGist;
exports.config = config;
exports.client = client;
exports.updateGistOnGuildCreate = updateGistOnGuildCreate;
exports.onGuildCreate = onGuildCreate;
exports.tap = tap;
exports.checkWhitelistedChannel = checkWhitelistedChannel;
exports.onMessage = onMessage;
/*  Not a pure module */
