// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Variants = require("../Discord/Variants.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Discord_Role = require("../Discord/Discord_Role.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Discord_Message = require("../Discord/Discord_Message.bs.js");
var Discord_Snowflake = require("../Discord/Discord_Snowflake.bs.js");
var Discord_GuildMember = require("../Discord/Discord_GuildMember.bs.js");
var UpdateOrReadGistJs = require("../updateOrReadGist.js");
var Services_VerificationInfo = require("../services/Services_VerificationInfo.bs.js");
var Discord_GuildMemberRoleManager = require("../Discord/Discord_GuildMemberRoleManager.bs.js");

var MeHandlerError = /* @__PURE__ */Caml_exceptions.create("Handlers_Me.MeHandlerError");

function readGist(prim) {
  return UpdateOrReadGistJs.readGist();
}

function getRolebyRoleName(roleName, guildRoleManager) {
  var guildRole = Belt_Map.findFirstBy(guildRoleManager.cache, (function (param, role) {
          var role$1 = Variants.wrapRole(role);
          return Discord_Role.validateRoleName(role$1.name) === roleName;
        }));
  if (guildRole !== undefined) {
    return Variants.wrapRole(guildRole[1]);
  }
  throw {
        RE_EXN_ID: MeHandlerError,
        _1: "Could not find a role with the name " + roleName,
        Error: new Error()
      };
}

function getRoleFromGuildData(data) {
  return data.role;
}

function getGuildDataFromGist(guilds, guildId, message) {
  var guildData = Js_dict.get(guilds, guildId);
  if (guildData !== undefined) {
    return Caml_option.valFromOption(guildData);
  }
  Discord_Message.reply(message, /* Content */{
        _0: "Failed to retreive data for this Discord Guild"
      });
  throw {
        RE_EXN_ID: MeHandlerError,
        _1: "Failed to retreive data for this Discord Guild",
        Error: new Error()
      };
}

function verifyMember(guildRole, member) {
  var guildMemberRoleManager = Variants.wrapGuildMemberRoleManager(member.roles);
  Discord_GuildMemberRoleManager.add(guildMemberRoleManager, guildRole, /* Reason */{
        _0: "Add BrightId Verified role"
      });
  return Discord_GuildMember.send(member, "You are now verified", undefined);
}

function noMultipleAccounts(member) {
  Discord_GuildMember.send(member, "You are currently limited to one Discord account with BrightID. If there has been a mistake, message the BrightID team on Discord https://discord.gg/N4ZbNjP", undefined);
  return Promise.reject({
              RE_EXN_ID: MeHandlerError,
              _1: "Verification Info can not be retrieved from more than one Discord account."
            });
}

function me(member, param, message) {
  var guild = Variants.wrapGuild(member.guild);
  var guildRoleManager = Variants.wrapRoleManager(guild.roles);
  var guildId = Discord_Snowflake.validateSnowflake(guild.id);
  return $$Promise.$$catch(UpdateOrReadGistJs.readGist().then(function (guilds) {
                  var guildRole = getRolebyRoleName(getGuildDataFromGist(guilds, guildId, message).role, guildRoleManager);
                  return Services_VerificationInfo.getBrightIdVerification(member).then(function (verificationInfo) {
                              if (verificationInfo.userAddresses.length > 1) {
                                return noMultipleAccounts(member);
                              } else if (verificationInfo.userVerified) {
                                return verifyMember(guildRole, member);
                              } else {
                                Discord_GuildMember.send(member, "You must be verified for this role", undefined);
                                return Promise.reject({
                                            RE_EXN_ID: MeHandlerError,
                                            _1: "Member is not verified"
                                          });
                              }
                            });
                }), (function (e) {
                if (e.RE_EXN_ID === MeHandlerError) {
                  console.error(e._1);
                } else if (e.RE_EXN_ID === $$Promise.JsError) {
                  var msg = e._1.message;
                  if (msg !== undefined) {
                    console.error(msg);
                  } else {
                    console.error("Must be some non-error value");
                  }
                } else {
                  console.error("Some unknown error");
                }
                return Promise.resolve(message.t);
              }));
}

exports.MeHandlerError = MeHandlerError;
exports.readGist = readGist;
exports.getRolebyRoleName = getRolebyRoleName;
exports.getRoleFromGuildData = getRoleFromGuildData;
exports.getGuildDataFromGist = getGuildDataFromGist;
exports.verifyMember = verifyMember;
exports.noMultipleAccounts = noMultipleAccounts;
exports.me = me;
/* Variants Not a pure module */
