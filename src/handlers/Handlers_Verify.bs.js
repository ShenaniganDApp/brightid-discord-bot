// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Env = require("../Env.bs.js");
var UUID = require("UUID");
var Canvas = require("Canvas");
var QRCode = require("QRCode");
var Dotenv = require("dotenv");
var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Variants = require("../Discord/Variants.bs.js");
var Endpoints = require("../Endpoints.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var DiscordJs = require("discord.js");
var NodeFetch = require("node-fetch");
var Discord_Role = require("../Discord/Discord_Role.bs.js");
var Discord_Guild = require("../Discord/Discord_Guild.bs.js");
var Handlers_Role = require("./Handlers_Role.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Discord_Message = require("../Discord/Discord_Message.bs.js");
var Discord_Snowflake = require("../Discord/Discord_Snowflake.bs.js");
var Discord_GuildMember = require("../Discord/Discord_GuildMember.bs.js");
var Discord_GuildMemberRoleManager = require("../Discord/Discord_GuildMemberRoleManager.bs.js");

var VerifyHandlerError = /* @__PURE__ */Caml_exceptions.create("Handlers_Verify.VerifyHandlerError");

function validateNamespace(namespace) {
  return namespace._0;
}

function validateName(name) {
  return name._0;
}

function v5(name, namespace) {
  var name$1 = name._0;
  var namespace$1 = namespace._0;
  return UUID.v5(name$1, namespace$1);
}

var UUID$1 = {
  validateNamespace: validateNamespace,
  validateName: validateName,
  v5: v5
};

var Canvas$1 = {};

var QRCode$1 = {};

var $$Response = {};

Dotenv.config();

var config = Env.getConfig(undefined);

var uuidNAMESPACE;

if (config.TAG === /* Ok */0) {
  uuidNAMESPACE = config._0.uuidNamespace;
} else {
  throw {
        RE_EXN_ID: VerifyHandlerError,
        _1: config._0,
        Error: new Error()
      };
}

function addVerifiedRole(member, role, reason) {
  var guildMemberRoleManager = Variants.wrapGuildMemberRoleManager(member.roles);
  var guild = Variants.wrapGuild(member.guild);
  Discord_GuildMemberRoleManager.add(guildMemberRoleManager, role, reason);
  var partial_arg = "I recognize you! You're now a verified user in " + Discord_Guild.validateGuildName(guild.name);
  return function (param) {
    return Discord_GuildMember.send(member, partial_arg, param);
  };
}

function idExists(id) {
  var params = {
    method: "GET",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    timeout: 60000
  };
  return $$Promise.$$catch(NodeFetch("https://app.brightid.org/node/v5/verifications/Discord", params).then(function (res) {
                      return res.json();
                    }).then(function (res) {
                    var data = res.data;
                    if (data == null) {
                      return Promise.reject({
                                  RE_EXN_ID: VerifyHandlerError,
                                  _1: "No data"
                                });
                    } else {
                      return Promise.resolve(data);
                    }
                  }).then(function (data) {
                  var match = data.error;
                  if (match == null) {
                    var contextIds = data.contextIds;
                    if (contextIds == null) {
                      return Promise.reject({
                                  RE_EXN_ID: VerifyHandlerError,
                                  _1: "Didn't return contextIds"
                                });
                    }
                    var exists = Belt_Array.some(contextIds, (function (contextId) {
                            return id === contextId;
                          }));
                    return Promise.resolve(exists);
                  }
                  var msg = data.errorMessage;
                  if (msg == null) {
                    return Promise.reject({
                                RE_EXN_ID: VerifyHandlerError,
                                _1: "No error message"
                              });
                  } else {
                    return Promise.reject({
                                RE_EXN_ID: VerifyHandlerError,
                                _1: msg
                              });
                  }
                }), (function (e) {
                if (e.RE_EXN_ID === VerifyHandlerError) {
                  console.error(e._1);
                } else if (e.RE_EXN_ID === $$Promise.JsError) {
                  var msg = e._1.message;
                  if (msg !== undefined) {
                    console.error(msg);
                  } else {
                    console.error("Must be some non-error value");
                  }
                } else {
                  console.error("Some unknown error");
                }
                return Promise.resolve(false);
              }));
}

function makeEmbed(verifyUrl) {
  var fields = [
    {
      name: "1. Get Verified in the BrightID app",
      value: "Getting verified requires you make connections with other trusted users. Given the concept is new and there are not many trusted users, this is currently being done through [Verification parties](https://www.brightid.org/meet \"https://www.brightid.org/meet\") that are hosted in the BrightID server and require members join a voice/video call."
    },
    {
      name: "2. Link to a Sponsored App (like 1hive, gitcoin, etc)",
      value: "You can link to these [sponsored apps](https://apps.brightid.org/ \"https://apps.brightid.org/\") once you are verified within the app."
    },
    {
      name: "3. Type the `!verify` command in any public channel",
      value: "You can type this command in any public channel with access to the BrightID Bot, like the official BrightID server which [you can access here](https://discord.gg/gH6qAUH \"https://discord.gg/gH6qAUH\")."
    },
    {
      name: "4. Scan the DM\"d QR Code",
      value: "Open the BrightID app and scan the QR code. Mobile users can click [this link](" + verifyUrl + ")."
    },
    {
      name: "5. Type the `!me` command in any public channel",
      value: "Once you have scanned the QR code you can return to any public channel and type the `!me` command which should grant you the orange verified role."
    }
  ];
  return new DiscordJs.MessageEmbed().setColor("#fb8b60").setTitle("How To Get Verified with Bright ID").setURL("https://www.brightid.org/").setAuthor("BrightID Bot", "https://media.discordapp.net/attachments/708186850359246859/760681364163919994/1601430947224.png", "https://www.brightid.org/").setDescription("Here is a step-by-step guide to help you get verified with BrightID.").setThumbnail("https://media.discordapp.net/attachments/708186850359246859/760681364163919994/1601430947224.png").addFields(fields).setTimestamp().setFooter("Bot made by the Shenanigan team", "https://media.discordapp.net/attachments/708186850359246859/760681364163919994/1601430947224.png");
}

function createMessageAttachmentFromUri(uri) {
  var canvas = Canvas.createCanvas(700, 250);
  return QRCode.toCanvas(canvas, uri).then(function (param) {
              return Promise.resolve(new DiscordJs.MessageAttachment(canvas.toBuffer(), "qrcode.png", undefined));
            });
}

function getRolebyRoleName(guildRoleManager, roleName) {
  var guildRole = Belt_Map.findFirstBy(guildRoleManager.cache, (function (param, role) {
          var role$1 = Variants.wrapRole(role);
          return Discord_Role.validateRoleName(role$1.name) === roleName;
        }));
  if (guildRole !== undefined) {
    return Variants.wrapRole(guildRole[1]);
  }
  throw {
        RE_EXN_ID: VerifyHandlerError,
        _1: "Could not find a role with the name " + roleName,
        Error: new Error()
      };
}

function verify(member, param, message) {
  var guild = Variants.wrapGuild(member.guild);
  var guildRoleManager = Variants.wrapRoleManager(guild.roles);
  var guildMemberRoleManager = Variants.wrapGuildMemberRoleManager(member.roles);
  var memberId = Discord_Snowflake.validateSnowflake(member.id);
  var id = v5(/* UUIDName */{
        _0: memberId
      }, uuidNAMESPACE);
  return Handlers_Role.readGist(undefined).then(function (guilds) {
              var guildId = Discord_Snowflake.validateSnowflake(guild.id);
              var guildData = Js_dict.get(guilds, guildId);
              if (guildData !== undefined) {
                var guildRole = getRolebyRoleName(guildRoleManager, guildData.role);
                var deepLink = Endpoints.brightIdAppDeeplink + "/" + id;
                var verifyUrl = Endpoints.brightIdLinkVerificationEndpoint + "/" + id;
                return idExists(id).then(function (exists) {
                            if (exists) {
                              Discord_GuildMemberRoleManager.add(guildMemberRoleManager, guildRole, /* Reason */{
                                    _0: ""
                                  });
                              return Discord_GuildMember.send(member, "I recognize you! You're now a verified user in " + Discord_Guild.validateGuildName(guild.name), undefined);
                            } else {
                              return createMessageAttachmentFromUri(deepLink).then(function (attachment) {
                                          var embed = makeEmbed(verifyUrl);
                                          Discord_GuildMember.send(member, {
                                                embed: embed,
                                                files: [attachment]
                                              }, undefined);
                                          return Promise.resolve(message.t);
                                        });
                            }
                          });
              }
              Discord_Message.reply(message, /* Content */{
                    _0: "Failed to retrieve role data for guild"
                  });
              return Promise.reject({
                          RE_EXN_ID: VerifyHandlerError,
                          _1: "Guild does not exist"
                        });
            });
}

exports.VerifyHandlerError = VerifyHandlerError;
exports.UUID = UUID$1;
exports.Canvas = Canvas$1;
exports.QRCode = QRCode$1;
exports.$$Response = $$Response;
exports.config = config;
exports.uuidNAMESPACE = uuidNAMESPACE;
exports.addVerifiedRole = addVerifiedRole;
exports.idExists = idExists;
exports.makeEmbed = makeEmbed;
exports.createMessageAttachmentFromUri = createMessageAttachmentFromUri;
exports.getRolebyRoleName = getRolebyRoleName;
exports.verify = verify;
/*  Not a pure module */
