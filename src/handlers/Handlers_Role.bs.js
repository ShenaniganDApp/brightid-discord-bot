// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Discord_Role = require("../Discord/Discord_Role.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Discord_Message = require("../Discord/Discord_Message.bs.js");
var Discord_Snowflake = require("../Discord/Discord_Snowflake.bs.js");
var UpdateOrReadGistJs = require("../updateOrReadGist.js");

var RoleHandlerError = /* @__PURE__ */Caml_exceptions.create("Handlers_Role.RoleHandlerError");

function updateGist(prim0, prim1) {
  return UpdateOrReadGistJs.updateGist(prim0, prim1);
}

function readGist(prim) {
  return UpdateOrReadGistJs.readGist();
}

var newRoleRe = /(?<=^\S+)\s/;

function role(member, param, message) {
  var tmp;
  if (member.hasPermission("ADMINISTRATOR")) {
    var role$1 = Discord_Message.validateContent(message.content).split(newRoleRe);
    var role$2 = Belt_Array.get(role$1, 1);
    if (role$2 !== undefined) {
      var role$3 = Caml_option.valFromOption(role$2);
      tmp = role$3 !== undefined ? UpdateOrReadGistJs.readGist().then(function (guilds) {
              var guildId = Discord_Snowflake.validateSnowflake(message.guild.id);
              var guildData = Js_dict.get(guilds, guildId);
              if (guildData !== undefined) {
                var previousRole = guildData.role;
                var guildRole = Belt_Map.findFirstBy(message.guild.roles.cache, (function (param, role) {
                        return Discord_Role.validateRoleName(role.name) === previousRole;
                      }));
                if (guildRole !== undefined) {
                  return Discord_Role.edit(guildRole[1], {
                                  name: /* RoleName */{
                                    _0: role$3
                                  },
                                  color: /* String */{
                                    _0: ""
                                  }
                                }, /* Reason */{
                                  _0: "Update BrightId role name"
                                }).then(function (param) {
                                return UpdateOrReadGistJs.updateGist(Discord_Snowflake.validateSnowflake(message.guild.id), {
                                            role: role$3
                                          });
                              }).then(function (param) {
                              Discord_Message.reply(message, /* Content */{
                                    _0: "Succesfully update verified role to " + role$3
                                  });
                              return Promise.resolve(undefined);
                            });
                } else {
                  Discord_Message.reply(message, /* Content */{
                        _0: "No role found with name: " + previousRole
                      });
                  return Promise.reject({
                              RE_EXN_ID: RoleHandlerError,
                              _1: "No role found with name: " + previousRole
                            });
                }
              }
              Discord_Message.reply(message, /* Content */{
                    _0: "Failed to retreive role data for guild"
                  });
              return Promise.reject({
                          RE_EXN_ID: RoleHandlerError,
                          _1: "Guild does not exist"
                        });
            }) : Promise.reject({
              RE_EXN_ID: RoleHandlerError,
              _1: "Role is empty"
            });
    } else {
      Discord_Message.reply(message, /* Content */{
            _0: "Please specify a role -> `!role <role>`"
          });
      tmp = Promise.reject({
            RE_EXN_ID: RoleHandlerError,
            _1: "No role specified"
          });
    }
  } else {
    Discord_Message.reply(message, /* Content */{
          _0: "Must be an administrator"
        });
    tmp = Promise.reject({
          RE_EXN_ID: RoleHandlerError,
          _1: "Administrator permissions are required"
        });
  }
  return $$Promise.$$catch(tmp, (function (e) {
                if (e.RE_EXN_ID === RoleHandlerError) {
                  console.error(e._1);
                } else if (e.RE_EXN_ID === $$Promise.JsError) {
                  var msg = e._1.message;
                  if (msg !== undefined) {
                    console.error(msg);
                  } else {
                    console.error("Must be some non-error value");
                  }
                } else {
                  console.error("Some unknown error");
                }
                return Promise.resolve(undefined);
              }));
}

exports.RoleHandlerError = RoleHandlerError;
exports.updateGist = updateGist;
exports.readGist = readGist;
exports.newRoleRe = newRoleRe;
exports.role = role;
/* Discord_Message Not a pure module */
