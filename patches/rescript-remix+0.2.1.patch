diff --git a/node_modules/rescript-remix/.merlin b/node_modules/rescript-remix/.merlin
new file mode 100644
index 0000000..d0d7893
--- /dev/null
+++ b/node_modules/rescript-remix/.merlin
@@ -0,0 +1,12 @@
+####{BSB GENERATED: NO EDIT
+FLG -ppx '/Users/vic__gi/Documents/BrightIDbot/node_modules/rescript/darwin/bsc.exe -as-ppx -bs-jsx 3'
+S /Users/vic__gi/Documents/BrightIDbot/node_modules/rescript/lib/ocaml
+B /Users/vic__gi/Documents/BrightIDbot/node_modules/rescript/lib/ocaml
+FLG -w +a-4-9-20-40-41-42-50-61-102+A-40-42-61
+S /Users/vic__gi/Documents/BrightIDbot/node_modules/@rescript/react/lib/ocaml
+B /Users/vic__gi/Documents/BrightIDbot/node_modules/@rescript/react/lib/ocaml
+S /Users/vic__gi/Documents/BrightIDbot/node_modules/rescript-webapi/lib/ocaml
+B /Users/vic__gi/Documents/BrightIDbot/node_modules/rescript-webapi/lib/ocaml
+S src
+B lib/bs/src
+####BSB GENERATED: NO EDIT}
diff --git a/node_modules/rescript-remix/src/Remix.js b/node_modules/rescript-remix/src/Remix.js
new file mode 100644
index 0000000..f147240
--- /dev/null
+++ b/node_modules/rescript-remix/src/Remix.js
@@ -0,0 +1,68 @@
+
+
+
+var RemixBrowser = {};
+
+var RemixServer = {};
+
+var Meta = {};
+
+var Links = {};
+
+var Outlet = {};
+
+var ScrollRestoration = {};
+
+var Scripts = {};
+
+var LiveReload = {};
+
+var Link = {};
+
+var NavLink = {};
+
+var Form = {};
+
+var Session = {};
+
+var SessionStorage = {};
+
+var CreateFetcherSubmitOptions = {};
+
+var Form$1 = {};
+
+var Fetcher = {
+  Form: Form$1
+};
+
+var $$Location = {};
+
+var Cookie = {};
+
+var CreateCookieOptions = {};
+
+var CreateCookieSessionStorageOptions = {};
+
+export {
+  RemixBrowser ,
+  RemixServer ,
+  Meta ,
+  Links ,
+  Outlet ,
+  ScrollRestoration ,
+  Scripts ,
+  LiveReload ,
+  Link ,
+  NavLink ,
+  Form ,
+  Session ,
+  SessionStorage ,
+  CreateFetcherSubmitOptions ,
+  Fetcher ,
+  $$Location ,
+  Cookie ,
+  CreateCookieOptions ,
+  CreateCookieSessionStorageOptions ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-remix/src/Remix.res b/node_modules/rescript-remix/src/Remix.res
index b320b86..cc06645 100644
--- a/node_modules/rescript-remix/src/Remix.res
+++ b/node_modules/rescript-remix/src/Remix.res
@@ -5,6 +5,25 @@ module RemixBrowser = {
 }
 
 type entryContext
+type appLoadContext
+
+type params = Js.Dict.t<string>
+
+type dataFunctionArgs = {
+  request: Webapi.Fetch.Request.t,
+  context: appLoadContext,
+  params: params,
+}
+type headersFunctionArgs = {
+  loaderHeaders: Webapi.Fetch.Headers.t,
+  parentHeaders: Webapi.Fetch.Headers.t,
+  actionHeaders: Webapi.Fetch.Headers.t,
+}
+type headersFunction = headersFunctionArgs => Webapi.Fetch.Headers.t
+
+type loaderFunction<'a> = dataFunctionArgs => Js.Promise.t<'a>
+
+type actionFunction<'a> = dataFunctionArgs => Js.Promise.t<'a>
 
 module RemixServer = {
   @module("remix") @react.component
@@ -44,6 +63,7 @@ module LiveReload = {
 module Link = {
   @module("remix") @react.component
   external make: (
+    ~className: string=?,
     ~prefetch: [#intent | #render | #none]=?,
     ~to: string,
     ~reloadDocument: bool=?,
@@ -53,9 +73,23 @@ module Link = {
   ) => React.element = "Link"
 }
 
+module NavLink = {
+  @module("remix") @react.component
+  external make: (
+    ~className: string=?,
+    ~prefetch: [#intent | #render | #none]=?,
+    ~to: string,
+    ~reloadDocument: bool=?,
+    ~replace: bool=?,
+    ~state: 'a=?,
+    ~children: React.element,
+  ) => React.element = "NavLink"
+}
+
 module Form = {
   @module("remix") @react.component
   external make: (
+    ~children: React.element,
     ~method: [#get | #post | #put | #patch | #delete]=?,
     ~action: string=?,
     ~encType: [#"application/x-www-form-urlencoded" | #"multipart/form-data"]=?,
@@ -65,6 +99,58 @@ module Form = {
   ) => React.element = "Form"
 }
 
+module Session = {
+  type t
+}
+
+module SessionStorage = {
+  type t
+
+  @module("remix")
+  external getSession: (~cookieHeader: string=?) => Js.Promise.t<Session.t> = "getSession"
+  @module("remix") external commitSession: Session.t => Js.Promise.t<string> = "commitSession"
+  @module("remix") external destroySession: Session.t => Js.Promise.t<string> = "destroySession"
+}
+
+module CreateFetcherSubmitOptions = {
+  type t
+
+  @obj
+  external make: (~method: string, ~action: string, ~encType: string, ~replace: bool) => t = ""
+}
+
+module Fetcher = {
+  type t
+  @send external submit: 'target => unit = "submit"
+  @send
+  external submitWithOptions: ('target, ~options: CreateFetcherSubmitOptions.t) => unit = "submit"
+  @send external load: (t, ~href: string) => unit = "load"
+
+  @get external state: t => 'state = "state"
+  @get external _type: t => 'a = "type"
+  @get external submission: t => 'submission = "submission"
+  @get external data: t => 'data = "data"
+
+  module Form = {
+    @module("remix") @react.component
+    external make: (
+      ~children: React.element,
+      ~method: [#get | #post | #put | #patch | #delete]=?,
+      ~action: string=?,
+      ~encType: [#"application/x-www-form-urlencoded" | #"multipart/form-data"]=?,
+      ~reloadDocument: bool=?,
+      ~replace: bool=?,
+      ~onSubmit: @uncurry ReactEvent.Form.t => unit=?,
+    ) => React.element = "Form"
+  }
+}
+
+module Location = {
+  type t
+
+  @get external state: t => 'state = "state"
+}
+
 @module("remix") external json: {..} => Webapi.Fetch.Response.t = "json"
 
 @module("remix") external redirect: string => Webapi.Fetch.Response.t = "redirect"
@@ -73,6 +159,12 @@ module Form = {
 
 @module("remix") external useLoaderData: unit => 'a = "useLoaderData"
 
+@module("remix") external useFetcher: unit => Fetcher.t = "useFetcher"
+
+@module("remix") external useLocation: unit => Location.t = "useLocation"
+
+@module("remix") external useOutletContext: unit => 'a = "useOutletContext"
+
 module Cookie = {
   type t
 
@@ -109,3 +201,17 @@ module CreateCookieOptions = {
 @module("remix") external createCookie: string => Cookie.t = "createCookie"
 @module("remix")
 external createCookieWithOptions: (string, CreateCookieOptions.t) => Cookie.t = "createCookie"
+
+module CreateCookieSessionStorageOptions = {
+  type t
+
+  @obj external make: (~cookie: Cookie.t) => t = ""
+}
+
+@module("remix")
+external createCookieSessionStorage: unit => SessionStorage.t = "createCookieSessionStorage"
+
+@module("remix")
+external createCookieSessionStorageWithOptions: (
+  ~options: CreateCookieSessionStorageOptions.t,
+) => SessionStorage.t = "createCookieSessionStorage"
